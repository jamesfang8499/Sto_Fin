%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: A9R2DE7.tmp.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: james
%%CreationDate: 2020/3/15, 16:09:39
%%BoundingBox: 0 0 122 124
%%HiResBoundingBox: 0 0 121.4554 123.3894
%%CropBox: 0 0 121.4554 123.3894
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1110 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:ModifyDate="2020-03-15T16:09:08+08:00"
   xmp:CreateDate="2020-03-15T16:09:08+08:00"
   xmp:MetadataDate="2020-03-15T16:09:08+08:00"
   xmp:CreatorTool="dvips(k) 5.86 Copyright 1999 Radical Eye Software"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:eed9aee0-da9e-4434-bfe4-f733f0e898fc"
   xmpMM:InstanceID="uuid:84f4999b-b24a-4783-a1fc-78540797ac48"
   pdf:Producer="Acrobat Distiller 5.0.5 for Macintosh">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Markov Chains</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>J. R. Norris</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -123.389 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 123.389 li
121.455 123.389 li
121.455 0 li
cp
clp
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CMR10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+CMR10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (CMR10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 46 /period put
dup 49 /one put
dup 50 /two put
dup 61 /equal put
dup 83 /S put
dup 84 /T put
dup 87 /W put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 106 /j put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 121 /y put
def
/FontBBox {-251 -250 1009 969} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [69] def
/StemSnapH [22 31] def
/StemSnapV [69 89] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
33 dict dup begin
/parenleft <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8BB61D8ED
90A20EE239C62172B553BFF416342D6CD99C95C515CA225C40039DBAF08CE4F0
55B08F39C15D29C99EF3EDD066CCCEF8932365A3BB1620FA5F0BCE8AF21A5BDE
C0FFD55FA45F247FC811007CB408F0DCDD3AE01E3246> |-
/parenright <1C60D8A8C9B08A958B2129D6E9761120E2D623F206A8A207F03
DEA8F466C0D4F860EDF515D421F89285FC2D8EC76F5E903EDE1B5CFFAEC5DEA9
22C7FC4A51953A99A5FB1F96793348D816F60492670058F4DEA6D328AB20FBAD
B3C1B57A79D8CCD13A3C6D068BAD5F09F347ED0C895> |-
/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A7698
DF02C61BB3071F67A562DD96D0521F578EC9F57BF5A71BF023ACCD67B8727CFD
38538E62ACB3D55D0B01252803DA68060E5342CFD41A7D> |-
/period <1C60D8A8C9B08A9570810981675968F2C907C696DFE9BE69433F613
9DF6C45B8165ACC43B6E0B309859F778ABCF0> |-
/one <1C60D8A8C9B7A73DC579B9CE13A4EA8C203AFC890ABD6F58341B006CF1
BDD8FED3A7238E01F751FEAC75885229C293891E5636AD630D9C884528B6FEF0
0728A740ED77D054B4743ECA5E3947520FEF6B23D548765D11> |-
/two <1C60D8A8C9B7A73DC50B0411757B441481CCF7EF812EEB9B3F6A08293A
A33E44598842821CBFE74832C3A2FC51890F3A66AFDE8EA8269173784AF985B0
8CD4044AADA37EBF8296E8DBBCEABE3042A3995F6A3A8DE32D90D624CEDF4C1B
CFEECD943884DD6052923FAC92315AE2977DECA1B6F479ADBDA41B10FDF2F38D
2B74CBF99D8D6FF4> |-
/equal <1C60D8A8C9B08A946182837629008D945C50B3BD77B79680F3B07BDA
6301D2521ADF665EADEA779B8650AC6CDB556621631497A3BE00C67036F6EB06
05A36A2C0EE306396247E4A79F8EFAE500D78B59605F041F11> |-
/S <1C60D8A8C9B08A95C5897169EED99899F86A6DCF3CD291B001131D3BCB45
BF71748507542417352D5B30F63C60EB90DCF55005F88E95175B21D3219CD9E9
2E89E417B177D285600845553F66626D2225552D23A7697637BDCEEECAEA18AB
42A896E96FF5B3536CC368A5F7504B6C75D962A4B5F9534F79AC78DC99848461
42257A40DE257430C92806EBA73FF7D93DF0A6C207299E2D17F4071F9096D016
163F4D3EC1889ADA266D3682F2D99904573A5022A10E61069737F2D55F919F95
A33DB6DD2667321E4727855B58DBF4B1E5A294928E6CEABFBD34F296C1B758> |-
/T <1C60D8A8C9B08A9454CA4C75C5C97DCE7AB32777FAAECD12647866E7CB3F
CCDC541E37F2225E520DEDE695980D4012AD5B972BDABC7E7E5410E71AC63692
4E778B3131B6C4D1E76F8C4592AC311A2107F53DC1850538C9E487E6D5DBDFE8
027D7126BA9ED8B24E7379B57E474ACD298BF6B3700CC970D80111DD98EFC872
C24D0DA3C75DDDFD177C6D15> |-
/W <1C60D8A8C9B08A94DF93CFE877B47057C7AA7A39F5E120783EC688EC89C1
8D88E4CFACCAF32BE3FB943A3FA817A1C0529930AB0065CCAE1705346D415CAF
6F3BE8B28DBD2FE903E61186A32EDF38B838858E46745C2B7FA48B8E6E0D0986
BD7A8BA149207F3F0EA77A4EFE06A7122E8FC6C2B04A0B03DD31C256ACF417D3
9DB720EA63717B8AF030369F0ACE1BFC1BDA8084F86023424DB31D0A5F8EC215
16A92BBE98292BD36BE0960649A591F01066473D657A65D807C4E00EF2369AF8
93D97C00CCFC22CA894227F9117CFE788197C57F5A> |-
/a <1C60D8A8C9B7A73DCB03313BCF7BA903D75A87DEC6EB34306A2C875A7B9D
6F03FA56EC184A666A965328412CD76CCEF3CAD69BC525A6A87F1F2D19F5D1B7
FD73AE7371FEED4E7F3CC2802C465D966135A2EE9CF8A0BF2840255B111E8037
10168818EEA9C2DFE9C99A20ABC767161183EAE437218D2E1239DA58B1500E1F
7F2D27496F0873D02EC47EEDEB84F4B0D78003FE0EDD73F083F9C52A46ED942D
3466EB983C6AA2296E8F2602B3A2BC810F850571C10A31EC74CF8C0EACAB287D
E5031078E0A963D32061> |-
/b <1C60D8A8C9B08A95C5897169EED96D271CC0A201580A85BBB6CFE03702C9
389AEE25CE69D1BDDECD4E28232C32A3113C892241798575F645E97E1FEF4D17
BABACA9B1400EB966B8CBA5BFC74A4181A1A52C4AC1E4D4BCB3BEFBF05CAB342
4B8B71500585C2C89CD37B890F00AF434789553E13269B7993EDDE63F9B6DB1C
CC49FF90A25496B9C07E5617BD7387C1694D4EBB8E59CF0CEF85691D4C91D3CD
1D33AB05DBBDE11A3BE1086B97B8CBA534FBFB> |-
/c <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC563DEDE799FE18B66F38FD9D
86FB33EF8157737910C2A21CF1859082F165505E98A2D559D2B21F8D988656D0
8136253C2962AD8B7BF2A4CE3B3D77FFEE3AC8C805C2D68655124FEAC62FFFA4
B2E84874A6B6FEF5E31C416CAF5B3B1B491C61B5BE3DD5423D78BF> |-
/d <1C60D8A8C9B08A95C5897169EED96D33CB6A9013DDE3D04C2845E595598C
4E4627D0E1F97AFD1FA3154224DA0D119EDECEF82924766CE4492626DF7B3B07
C4245B263AA58C37772C982C7955B9EED30A1A264318D030C3D295AD4CC9C21E
7AC9D2948AC9CD001C0EF80B50DF932CF6EE69C321627BC51A66341B5399D1E7
8024F824DB5DEE83140E59FB88138D6F0F5D2F350BA93460F2F700A9AE6D35AB
E4DB962D8E6D84D6D606A800DD98F8807C3555FEEB> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC97E4CB216B20786BB8409E5C
B08921F2042A459BE0DE80ADD86BD8D3FC85885973F3B8E71B750A7BBBCB2EC2
7654BABC4A421F19CAF38DA67236E15B4E8454D787305B09443F6B2507420195
7C1B86920E2C7CED0E614A34A438ED72C4B057D323DD16C0BE898DF1> |-
/f <1C60D8A8C9B08A956BA65798425CE9B0A78F07A04AF2F8524751F181F94C
EF756ACD6AB92BD091D7482415CDE9144C26B1697F8DF70FCF1DEFD4FA16FBE3
9206B1378E548C93AC587B3EF0B1ED3ACC74CAAD2CEA03512A889B4BA237C2E5
79B0E01D3D82622F69FB50659184006104BE20E13DAFC7793B241C1FD1A3880C
4AA41E91E3F86F715551> |-
/g <1C60D8A8C9B7A73DB58EA28807584EB19BC6EA1448A12312E623B90358A1
6C40D52FF50AB2BCF83396829D3E501BD0EAB8595D9693E632ABAF05A4D1FBD5
E9FB32E59BDDF670BD3805B1A8647E1D2641030D018FCD259301AC116F3DEE87
AA68CECE526FB7B8BC0206EAEFB580DA05969530F8D40CD15579447988D4CF07
5C24F15E32C0A9AC369D08351B0D49CAFF731E593F6C55EE74B16DE9D9A4B199
3D1CF0FF1D3A57A52A0C64F106D414FF112A5DA34DEE3AB850B6A4492C25D3F0
9EFC86EFE140D828B1F4BAE5664F14014926ED1A5AFBCC814A3428F143CF5FB2
88702BF23054721A3BAA8027EF0D34A7A361A40A12717277178C5820C35A1131
71DEF9DBB455B7A9D7BB98406120BD93C5B4D04664B09F3E37553C20D6> |-
/h <1C60D8A8C9B08A95C5897169EED9664BED359D179BDDBB0B44F78A354068
F1882593A360E640ED3246F83F38F17203BDBBCE194B9E0A6BE002DEEC6E590D
34E67EDA7804A1C1CA9840B3036AA2F9D110358C769BBBA6E4ABF35AA04B72BD
94DD37985D5F60B66C4561BE8C71200493330FB300D08910FDC33541EB4ED02B
C0E5DA36A3AFFA9C2A4E001E9049F0E519949606FF0894B2E73F51ED> |-
/i <1C60D8A8C9B08A9570810981675968AD25F24D2B3EAE33A4AEDADBE9B65D
A53E9F2E54B16133284CA9914BED3880C793207FBDC7926300AD07E6E54407B5
1EA082FB5EE3816A6A23A8296A947037E49B372BD5DFBDAE3E0626953F75EA84
BE757683B949F1DE2291C5796E30589D0B63B15E0D5680411C> |-
/j <1C60D8A8C9B08A956BA65798425C99F9E21B31AD9D7D46055B6927E0A28A
ECC1418A3336BA4234C7F9442C0DE9BA878C87095F81AC64120B3762338C77D9
8CC6DD27B94A58E67CAB08F514CD98B3B4F9938B9CFB8CA4520BA8B627FC78F8
E0F443F14C065FC4B15A336B544A6B5CE40AFCB7DD46B36B2CD516D6760D561A
7A688A5581533C67A4E63DCC684A62C23527F4> |-
/l <1C60D8A8C9B08A9570810981675968AD25F317189905083B97CD6CD1B880
05B79B666989E13C0F8D0889AD0162C7E87274D188EBBD1A911FDD0B6E360AA1
C515725198B9106B157680FC> |-
/m <1C60D8A8C9B08A940B724A74A01E174C613EBE4AE79E2AFFD113284480DB
6FE09606C55F36699E627D1CC0541895DC471E8C2C5C4E2C95A8F4D0511C409C
AAF681328E85B80F5E465253D2C6073C651F0604062EA2D77E8A500E1EE4F307
7B7F7483D2CC9857B1ED96D898A5541DF9DE8AB23FB73C101B0C097D40132490
7E04FB8955FEAB5C502CF57E144F90A7ECF5381D38A3F171BB6DF98E09DF4194
6459233CB9F82A2654E1E7DAB925958FBF1007B46353DB553ADE2BBAAF8A2664
8EECD081A81546AA8F04D4AE967DDA0613FF55E900D130A60E615888E6EB7D42
9CB17E070CB4D63732AC4F9FD92362B29E21DF180EDBB7F0149C6A01> |-
/n <1C60D8A8C9B08A95C5897169EED9664BED359D179BD38846B55E34D4CAA6
E85E9CF3F20D5FF6B35F1C9AAE2A542B7B24E087B6004A4C7219997095CC0DD0
7A15DB83B5FEAD13F209441FFD364AD3DBF6E16129F3599BACA005A523490ABC
41E4DF320ACE384037EE1D352E3FAD8A9E2CECBD75A999F7B655F4FFBFAC6FFF
84029A8DF710DBB0D7CD4C1D20367E79BC4E312103DCC482005590EA2F1652EA
57C34D10CC78642AFD> |-
/o <1C60D8A8C9B7A73DCEB07E09D16841D605E4F67059E6B258F546B80703E4
CDAF20027B900118209D5372F965F2045D50C02A29110A048C891DEBA3210CDF
C5CDE2309C0CDE0E4855E9F6D8954C4C68826A14AD2E4C6227A036D85D304D6A
96FEAA92DEC3CD1B9F4AD57B5F1EBAB070FE911461A7D5B958F5> |-
/p <1C60D8A8C9B08A95C5897169EED91609D9E4D5F91353A54E37DF51998183
52315911AF5324EFF8F803A0D7623A2DDCB047188B5B8F28AB77A5ED34430D99
57B9E0225FBFAE612AB3A16746E264A6930D63A3F157DEFA872D2CA520250AA3
380B48623F26CA3F7D040CB163CC4C6240013209FBA4AD816878F179C8F27320
EBC05CF6C42FFA533A0E8716E243D2941CFE755ACC6E312A0F393F2C290E0F1A
CE85DBC680C6195A83A8DF92> |-
/r <1C60D8A8C9B08A9584DCB847BA986212E50A1268FF1FD1FC6504D9F4D673
BD97E004E27192E1359AD741527FE014B82A8709E1D277CF1F73EB8831CADE61
1D9AD525BE07EEB6589229F52FE652CA10A278AC096BF0A2B010C8B215B1ACA0
BBB8EF8E3C77EF77F60B5CDD1035D115BEF1087A4AEB28A5F886037DA56DEC62
DBB1D4F1AE123A1AD0E8FD48681467> |-
/s <1C60D8A8C9B08A9586D4F7B21AA9B0967A13D9D7A42FE340F518B826828C
B1C2BB6756CD4C9284475BF78FAB574767246E1F9CBC21AACF1F3C97D1790131
F28F8DFADB3AAE0AA727045B30CDDB07BDF05EDA5C24C0AFE386D470551D7E8E
D902488F32C5E29D2F3E7F01605EE454D8B7A57FD0F16F8D3A10D6235D828477
DAAA15E6231D70C2BB9D9C0718FB249BC89490F9614317D9D2089D530687FFE9
B32E2EABFBD5A30223E1691D4FE59FFF3C416D75396DC2C2F68135236C16492B
80BA292D01981169C65CE545147B052951BDA4BD86> |-
/t <1C60D8A8C9B08A958B2129D6E9766AD6B3247B9CBDFB0724765D43ED23A7
B2BC7B24077C209594776C48799589E3DF7269407A6893D4C106057122D99E3F
649ACAFBE1812EEAA6C4DCDDD716BEB7694626BFFCAE715C15EF0FD8CE9F6FE4
E96B03> |-
/u <1C60D8A8C9B08A95C5897169EED96D33CB6A8CCD6F539BADC574F30FA019
2FAAA0351E8C93175F4B6BE4D2DCA8A13E4F01BEC5788441B5C71C1247369B6B
73137454B1C207EA4F43D533FE87512BAD8DD4F3DBBECD9A7A1CE3F33A4D3F31
6952FDB339B4B6A937009D6EC9821D8553981B7D8AABC3E750369071> |-
/v <1C60D8A8C9B08A95D222871B45C81C126204E8A3F3EFC2EBF937B1E5F2B8
737EDCCFF78DB8693FA0E7B559CFAC0A233112105FC1A8807ADD3013D4AE86C4
38318F1223CADD606642DF7E9A8EE9BE743E975DA759D856D52F7E927FE33606
3979ED38AB2E1EA4CB4F371A1EB04E6C5B864C9DB5271435AB2DE7D9DE15A6B1
D9E3FD555F015DADE467> |-
/w <1C60D8A8C9B08A9454CA4C75C5C9761F27DFD501BA4813FE991E533E1CD1
E174DB2ECA59D495EC56B0C1FD43D089BD170DD220487C38F20C192FAA7E2E88
3AD5437BC552CE37BD6C6BBA40409BE02939A8B895FF98709899D61A578F68A8
22D6CFB7A000AD2B69212700685F8E729740E6656D3B8D43A0C52B18628B0EFF
5F05D1944E33A86827C6670A3438CE653DA430AB3E54D22481FDFA780C4812C2
F3255AA0E07A5FC796A8653D62150A6CD8B7FE4B68F43CAA66CB6512EB54E359
E67F4D5FAA2BB87B8812835557ADA47955DD5F> |-
/y <1C60D8A8C9B08A95D222871B45C8674D920EF37C9F679699CE0B0FB82274
530CA6994E4FADB5C701717EBB278510CEF9D9EF1CB9FAAD7A4852BC3264781D
C6E288589EC6BAAB146DF34989FBC4BF92E31D5C616C1050CCC8D58166B328D1
E315EF5F39AF721DC6173775DFB26E6B6D40709A2BB053DECCFFF00649FC51FF
5F341744BBA1E71297E598A51054A43B9F951D7105485742D0A3BB595676EC69
1F5215F9D0DE2FC2C87BF5CCF8146FF6F88E> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FOACYZ+CMR10 /PBAAAA+CMR10 findfont ct_VMDictPut
/FOACYZ+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period 2{/.notdef}rp 
/one /two 10{/.notdef}rp /equal 21{/.notdef}rp /S /T 2{/.notdef}rp 
/W 9{/.notdef}rp /a /b /c /d /e /f 
/g /h /i /j /.notdef /l /m /n 
/o /p /.notdef /r /s /t /u /v 
/w /.notdef /y 134{/.notdef}rp]
FOACYZ+CMR10 nf
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-119.359 -462.278 mo
(112)
[5.52 5.51999 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+CMTI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+CMTI10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/BaseFontName (CMTI10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 46 /period put
dup 51 /three put
dup 67 /C put
dup 73 /I put
dup 77 /M put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
def
/FontBBox {-163 -250 1146 969} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 442 665 667] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [68] def
/StemSnapH [22 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
25 dict dup begin
/hyphen <1C60D8A8C9B08A9597B4632E36E6A76F8ED0A4363E5F2C8B13821B8
90C97C9AD41B8ECCA9D2490A7624843808D7BD22AA083104378A4B2EA30E310B
D0C7227F89CC580D11254> |-
/period <1C60D8A8C9B08A956B318F2665F168B1FCAB3F6A61A3CA2309B9F56
1363E553A93B7C274F8290756BC9E433497CE45D0> |-
/three <1C60D8A8C9B08A95DBED6976208F9054BCD62CD1F58B33888F2E0CE3
A4C362F4FB688454A265CB0ED5D9C6166A84C35F689BE105A17773157F9388E0
98A1A3C3D80B5E026AD2D5D94BE053ECD441B320BF33E6A9E7D253E85A8E204D
6A182BEA2E29D2A35A7535F363915246B33D74B79BDEF240A1A7623159E8A48E
5769C04851ACDE0E0E7DE2741C0DCFEB277EB3D7A12D484B1BA2ACBB59FDBFBB
391789EB17CA9755C7DB792F120DF849F507F0AEC3B914B60C83C62021A84C9A
79EBE9CFA69EB7B8644AAAB9E6AB9FF444BB8CF1CB> |-
/C <1C60D8A8C9B08A94595FB0CD27F86324CD8E8CCB6DE0F9CD5D06511672D3
487DA3159615E038D975EBF220A86B8B2DE1C3F45A5AB6A7DE1F0963D99C9BAC
5719C5733B7CDD4DDCA77ABB64A87B2C3C7AE3C23A5763BAC9B868E77FD1CDD4
9C3C175EC9CA1892423A9C4291D70A9E385232073F08DA421A88652701131AD0
93B74AEDA8692D1F0DDB0EC04D6B19F781A556EA8B6FFC0FEFBD> |-
/I <1C60D8A8C9B08A958A612865D7837D092614A972EDA96F0AAD8ABA51CEA3
3CCA635EFEBFAB2300C22638ECFDC8EDB05BD6904006AF7E9ED85205FCF02789
E0874AE275140854F34A91CACE70F7873B42EC753DF62EE788F0C970809A31E5
C231700050433F81F592C86494E8E20AEF50C14F6671FA8B67C09F2D20C0DD60
6C8F28F18B796CFD96874BD75BEE94A708> |-
/M <1C60D8A8C9B08A9410BCBA96A0C50DD94BA50D6CB2A972627F087E7A9855
E76EF86C417BE49418B7C4F74C6993050E96ED74729FEAA7D50A46D8C6CFF71C
CF3518430A5A073B0F9074A0F1FB61A084ADCC05B634EA46D991561B2A571FD3
53F0606CD3EB74BF971E70384EEFF2D08C619BF75F66CEDA31C560FF5EE96F04
8C2812E159E541363BDDA8E6EA767CB9254F16433B26D693370B68DBCEAFDFD8
4948478F98E6CC92E6764F62705F75E6B9F4D9D58C1B26D1962A76ED72BAC7BB
E03D974616F030D400D196FBF1B0A4B9E5BB2BA383D216FE0F42C5541335180F
62DBDB3C2524036F36AE5E2BD3FEDC97540D7C602AC65C5B61F24235> |-
/a <1C60D8A8C9B08A95DBED6976208F65E8258DFF51CB960ADD7427F4748AA7
40F9CAEB56E3159AEA80E78D302ACD2BADDF5E540B40F5F1E93B535D835621FA
8D6D0E9D33D63AB3D47C7F8DCFDFB0E30BC5260E365B4AC3F9A6B026D14E2149
6D1AA9088EEB9815297925C51FBCAC3FED2E86C32FC7D729A70E9535373A3719
D3B7F0D8A4392ABAAD859FF7C19BC30350B2BFECD70E0FEA8708BB5DB8FB2C61
3B9EE9A5E9073271DF87E07919A16833> |-
/b <1C60D8A8C9B74F361570F6157DF4C6BA1832633A20BDAD8E745C3F65A916
1A996E8C37CF5D8FCF54987D72D6D0F4034D4E3B8097E998A9E3504D576F88CD
9BACE2729D0A421614F6E6C017458B9BADE750B8EA47BF7D6420014A0BCA30F4
21D272FA7A0946FE9E1C74CBF9DD154EC8454F8F6FB538DFFBC1EDA0004B601E
CB6E1DA855879739BECBA256C1881D0EDB0F9D3AD0A4CE8EC9BB0FA0E6816D6C
5B537CEB42404BD146C418> |-
/c <1C60D8A8C9B74F361570F61AF26B11104E7939A2FC8050B546DF12C11F68
F9A24B73E15544F94136A9F15970ED39EEFD084CEB1917007486B51EDD22EB5C
A5A0FFCAC108B7BAECC313805D4C82C3427E1DF82EF05BF9DAD6A12A3B69EA96
E386A88FFA3760B208B6CA3B30E5D3F463DB7A3E9036950AF2C217> |-
/e <1C60D8A8C9B74F361570F61A35EA78464894B1DA8CAD69B19C3F676A41A6
475967ED30A297FEB3CD3D7317CB56BD67ED8BE136EDA10CB5745498DECD970D
ECEF1ACA52F9039E01C9F5B386033674FAFA84FBC05E576740F2A615DA4003C8
F6D0D15EE471656895AD1D665316B1B828EEA1C31E22F55730B1C2314980EB> |-
/h <1C60D8A8C9B08A95DBED6976208F65E8258DFF51CB9887A7CBE125DF9565
E042B3B6CE65980A8859DE30876E7E048C2548EFA734529A9E50A847E15B0D90
B5039377A4FD37F27B6F123D56207A1E4A6D57FD9E1A1D21DB50E30581F50B2F
C5BC1714E24786A2D537096278B314DFE305E3248D33EA3C902A857DD99D6424
2AE1BA65B63C677EF3F3341C6B43B8BA9C442FDE5F2C3FE11C9531BED49D2EBF
3E5B3C3C3D701D5487A98B9B384FE82443678C1CAD2B06847128D02BEA2E6FDE
DDF8768EB107C33875740E348F0893F196A5D575811B6A9F008E875001C63F> |-
/i <1C60D8A8C9B08A956B318F2665F1639A6CC8E9144365D6ED25E824095C5B
13D90392BEDCE6D2FA9E3E6FCD2C5A45961D26FB79D0E0A290D54B1A2BF5906F
AA4615FBBABF6FBC4206B742086A49055F771F83ABEF780167C51668D3F75E5C
46260BF270F1770F673BE8D273434FC047AD70DDF6792FBE2B96509E0A175C7F
B889C751E9FF612B0843F74796B71FE802167C00C7152949542B614AFFA4070F
F10912D018DCCC018185AE00D64C22E9471B118CE186B1A5FD80119CE5B71BDC
61B8586283FCA0251345DEBAE2AB27> |-
/k <1C60D8A8C9B74F361570F61A94390C9515323D5EBDAF94277670DC27952D
1944B4AFB083B5BA7748FF8D29F4C88C0B622D143CF2C682E9244942D7ADF752
4E096C6D9D0F7BCE36141C9DE28A5ED57E74BAB342AD32574E47C5920677B40F
B15529DE90ED6C889BC5F5C49F806A855761DCB5D9F9F8E446CEC32A3D8E2394
BE326A5F249FFFBCF26A4FE707964BAAA95EFE9C6B029875529CFEB2C339F9D7
F662BDD8EBC861FF4F1F76286780E4137DDC2B2DEBD4514A94B96E0614CC78E9
E159BBF97011E250448A60DE380FED21DBE6FAA99A16663D5194ADD6B0B1CB91
330F21360DB8C21E95B3C0C302948095A055141E93597ACAF1DBA11E00A33933> |-
/l <1C60D8A8C9B08A957FC8DDEDA4E5990236779DB2C90F61F4190F4B89DECD
2E6D61DFF5E2A23A2BEECDF030FFBF3170042C18E34771CFE53ECAC2E4B1D47B
74419D622F431E9D1DA047BB1CD9E02687DD3695180051EE7C12E71C652CDDDF
6F9758D7BF07B7248389E040A66B07EB5624EC993974B4C5AF8E51DEE2A5F297
BAAE54919FD4540E5EC2E27D0E678452> |-
/m <1C60D8A8C9B08A9471465E3388398E05458256DA1227062E25138E1CDE1C
81E88FEC57EE3CFAAE4FB7CE27FCD010FD241EA91DC181948FEE7DBBFE53997D
689ECEBCD7E547FC27B89A7FA11F00D8A9AFB94630E3F4A7E98EB2C26FD59F84
036FD362E89A581A4F71C63B2F218F9DB7118FA1EE21B09D3AF4CEEA805E4965
BFB25BA3A78ED124EDBE5E36429717A87F9C4354CE6CA354566C9890D41CEF67
06CFE46D0E7A02A59C55F68E65E773D74308F06122303B15A294DE8316FE4C78
5757766E73B7741A1621444849E73A402A080DF74026BF6EF2EC1860108BF435
8E9966F40307A9704F49B535A216C951D57DF95E26ED720085A856A93CF2E0B6
3CF6FFD2F7CDDBFCA231100E8540B67FF9E2B6B63515F1079FDAB0652AD97EEA
CD36> |-
/n <1C60D8A8C9B08A95C7B490C1B7DC3F2C7D9FA776E209D1F00857C3244C85
FB3ED5672886F130E9E7A8681B1CA1119E1C4B35A303BE773E9D71ACA2F11AC1
ABD9E652544C2F05A5E66862C3B1EEC04418503777464DC1178824FA9C598241
AB46E8756CAD51C494B1AEA453CE229E6E7DABFB5169F3CA1067AD88B5618C50
92694B1AFE2EDEB6AA699A416512356F8472A10C8412B6B84ECCE1F5BC5F65CF
E8BA0189550AEE4FA41A32A645D893401D0AD65B8F7D2B833312CDCC05099B10
138F7EA4BA022EC645A6C9F66095A3C3A8B40683F498BC0F> |-
/o <1C60D8A8C9B08A95DBED6976208F65E8258DFF51CB9608A44871691EC2E0
A092DB833438D1D2BF087FAB25520EEBFDA1810C898396402EDD8435DABCBA23
5435E10B0A329492B3968D802BB2E9043722B80EC0E5ED67E4B4331AEDAD6A57
319EBC8D615CFD050F466FEE58ED9B> |-
/p <1C60D8A8C9B08A95DBED6976208F1E5EA090EB63AB88FD1D91DC6F25F56E
22A2ABCCF9821A57C40B523943EC7B3D9782D6CBB74F188DB48D139DF0BF4B83
B04E146BB5EB856D1D045C1D1894EB27F69EB9ADF8865FE2E03D22251833AF00
A21915C8762BDFE28DC17C44A229C75B1654F60C82CFB2704CAD401F276E7FCD
491911A0EB894DA91EAA84AA54F94448C2027D5AC2C8C7B866A24BB616C0081A
C00EBD1AC88EA875BF7022AFF3927B4005932F34FA8BC04EEE5AD86BCFCE202E
2F64A358C4034EC28B719D5FAC0588C721BD68DF6ABB740CE8> |-
/r <1C60D8A8C9B08A95B8A717D99E4C5DC5CDE4202465348D79A747B6B9B32C
5051EDD22DBB8CC59AA4DD81F77924A794EA6F9A520DB998E77D31A71DBD98CD
0EA7D1ACD3205596E8F14F5BB0521FD034B1AA81C16676AABB0E4B64AAAAE344
5C2F636A816AFC8F0410E29DA4C3B29AD24438DB9898609D16B7D07BF86F5030
F8AB3D7C3A8BDF004EE9B968B6723A3CCE2828C8D822042BD2F96997A9> |-
/s <1C60D8A8C9B08A9583ED9D86CFC8469FA56925BBEB544F7FB95136B5FDE7
A1347171DC94936D86EE86E69104E52A38B30CF56558CF2C6B57321EF17D2EE0
65836B87D6C37C665A5E54E3328244FA0FDF2CE646E4873BFE896A99A8CBC76B
2AA41D5C27C77A12EFE163A08718F6ABD9F361581AE91C28FCA19CE6C0B3EFAE
532D4C31078F4A319B3C9D663A97A8A3C9B9B8B90002FE4B5FFF> |-
/t <1C60D8A8C9B08A959D8AA3D8E221FFA1ECA8C975E3D8D93F8D9510FA2C5F
966B0A726E3844F9227A8353ED28E469BF4A7FAC73ECCD3C728E71634DF00B43
60CD819A984E370280D424E6009B2F0F5DFE05F7F7542428D960FD4944E72C1E
3FEF5004DE1F666E160FE7495BB24D1C98F33A110AB2907D4D7E14F819EE0BF3
1C4F7DD1247F3F2BEDADD16CF3E5662EC223> |-
/u <1C60D8A8C9B08A95CDA386E4D298CDB942C4830EF89808650557481C8446
5886AB65B6A681486EC0F771868FBEE0544777680658849C63C092B9F054AC4D
2611BDC48A5913EA97ABF9503F51339AD1566A3FFD3DEFB63345F384AD6A624A
9178596F414136A2A836EF84126155742073CB6838C1882963B82D44F4091E60
F6EFF5B9C11893B9971EED653E036434F9E1133B35E7F8635BCAB4AE1206EB30
2A55A10F37B8743376A07E7C0E166A54178092F44170EC14945E7DD042F6777E
51B45D74AE7C4258C92FAAAA92510A> |-
/v <1C60D8A8C9B74F361570F6157DF4C6B451179203219C7F5C10D35A8AB484
9A005578DB4BD4C5B9C9494E36F53B90462EB8A3EAB37EAB871F39B78B130380
C4F2045C2846E21C81A0B35FCD9E9037E5B8E73FD0493F93C45B3577AF74FBEF
3C57CFDE0B771568840F3DAFC57D41880B4BD97145AD010F9F42F1B060C76E4B
A9F8EA303C40F755F8882163178C6652F07E86> |-
/y <1C60D8A8C9B08A95A12E68BA5E11057B8D6D06ACBD458B0DBCF4E0475D4C
5315CAB03C4523B57A1B41B7A87082B9226A2EE7B14AA0F904D9ACBEF9822C94
35179126EC347736EA0874A48F272CBDF189D08633E457572F167779687D0950
4D9C3D30CE712D91FC44F6397A2F4EAD3F16FF749C68630159D42F03D5F956C1
C4492FFABC12A62FB103A07FEFA0F783CF20179A241A98F77936A43692118746
63BA103F2455ED61F4C2D71739B2CEEFFE405D570F78C1695341711DD8C398E1
7C3B8E566D506612898EE565AB6284FE470A70C271E44D4914690ED217B92262
5CF6A14B4E1E3D75> |-
/.notdef <1C60D8A8C9B08A9597B4632E36E65E> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FOACZA+CMTI10 /HIBBAA+CMTI10 findfont ct_VMDictPut
/FOACZA+CMTI10*1 
[45{/.notdef}rp /hyphen /period 4{/.notdef}rp /three 15{/.notdef}rp /C 5{/.notdef}rp 
/I 3{/.notdef}rp /M 19{/.notdef}rp /a /b /c /.notdef 
/e 2{/.notdef}rp /h /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t /u 
/v 2{/.notdef}rp /y 134{/.notdef}rp]
FOACZA+CMTI10 nf
FOACZA+CMTI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-30.5591 -462.278 mo
(3.Continuous-timeMarkovchainsII)
[5.6011 8.2861 7.8477 5.60112 6.15996 3.63947 3.36554 6.15997 5.88605 5.6011 5.88608 4.48325 
3.92441 3.63943 3.36557 8.96539 9.11896 9.84222 5.60114 4.68051 5.04227 5.6011 8.75732 5.04227 
5.60114 5.60107 3.36557 6.15997 8.39557 4.23123 0 ]xsh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-119.359 -438.157 mo
(withtheusualconventionthatinf)
[7.95507 3.00163 4.30585 10.4427 4.30583 6.13588 8.99617 6.12492 4.31668 6.12492 5.5222 7.31944 
4.90849 5.52219 5.76329 5.40164 4.90849 5.76328 4.30583 3.00163 5.52219 10.3222 4.30582 6.13589 
5.52219 8.40445 3.00165 6.12494 0 ]xsh
%ADOBeginSubsetFont: QJJAAA+CMSY10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+CMSY10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.035 def
/BaseFontName (CMSY10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /infinity put
dup 59 /emptyset put
dup 102 /braceleft put
dup 103 /braceright put
def
/FontBBox {-29 -960 1116 775} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705] def
/OtherBlues [-124 -119] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [85] def
/StemSnapH [40 55] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/infinity <1C60D8A8C9B5EE317A5F5893EE8EE787BD513A8696A76D73F30BB
31E7B8C4085F7A3BE137442B21E2DB607226D5DCDE353CA0626B8AA584CE1D8B
A5B83261000B954D727C572546E64A1424DCCEF0B3222656EC0DE511E24FD9D4
237721AFB878F60A62E573904B05B53845D9B74330392BB33990B94EDE420470
6D86430CB0A6C166BDC6623ACC2D089983075956FD661570E4D888BE6D1E7765
1799F26C3E9DF7F6AD39EB5F874EECA75C01A3AE8ABBBA095> |-
/emptyset <1C60D8A8C9B7A73D7314D0110E34FACA8C95A496639E7DB14BE6E
F88DD1EDBFB41497F1A9AA51CD7404F17DF82D8C8E50F69311425455778F06DF
C560C090E48595607CD32AF6CFBB28FB38737907422EC21906422C5830C14C23
EFFD34616B6A5E09B52088612BEB62F8195DDA19E09EAEC8B1CF2237595E6EB9
4590C94F126F0141FD8DB3C7A327BB5463143B442EAB466E1BA51F4A4CD9CDE4
E1CD6D44C74463873AF18701B4016F17F894FAFC8F77A69EAB8A8F38D6259A95
C9AA9EBC812EE08735062678D544BE094928B91AB2CAA8A5C090A7F1B> |-
/braceleft <1C60D8A8C9B7A73DB562253524F5E14A30E2D0BF696ED1EC1832
95A6D99B3BA8FB24DB64474803A26F8962BAE1A2CA5312A983CA8F54B6A2CCE1
BDDA3BE7A71DC65187F905467F2B3DD6E2C46A0678FF636FF8C95A24B30A38BB
558B9114956B55462DFF6E91F237BBD08C7678143FE55B3326F60760923AC3FB
F2607F3A9D9831610688B18ABB03677BA0E9C91ED23BA198C76AB28BE6B2198F
782BEFB9FDC108557F68DBA2CFBE> |-
/braceright <1C60D8A8C9B7A73DB562253524F77EAA0C9D86D36E2A3E5029B
19678C1ADFB7D768C22FC42830CD4BFE33F922A0B35D4B8100996306D034A2AF
376DF52CDC59CEF40F1ADEE3D98D4B2E93796959422FDF4D3C93728708B2A090
9A3A4C863D92FDB9C8A8464E686F14A89B4451B451585AA4EDD696CE8BA342FC
161136031CEC1B831969CCB78C8B2D64DB2426CAEBE5228216AB6FB7F309CADE
26F419F1E2D30640CA1596947438C> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FOACZB+CMSY10 /QJJAAA+CMSY10 findfont ct_VMDictPut
/FOACZB+CMSY10*1 
[49{/.notdef}rp /infinity 9{/.notdef}rp /emptyset 42{/.notdef}rp /braceleft /braceright 152{/.notdef}rp]
FOACZB+CMSY10 nf
FOACZB+CMSY10*1 [10.9589 0 0 -10.9589 0 0 ]msf
50.0765 -438.157 mo
(;)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
59.6765 -438.157 mo
(=)sh
FOACZB+CMSY10*1 [10.9589 0 0 -10.9589 0 0 ]msf
72.3998 -438.157 mo
(1)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
83.3149 -438.157 mo
(.Weem)
[9.84219 10.3244 9.23944 4.91071 0 ]xsh
126.756 -438.157 mo
(phasisethat\()
[6.10849 6.10849 5.49478 4.33313 3.06192 4.3331 9.11124 4.3223 6.11945 5.49478 8.39899 0 
]xsh
%ADOBeginSubsetFont: GFNBAA+CMMI10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GFNBAA+CMMI10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/BaseFontName (CMMI10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 58 /period put
dup 60 /less put
dup 65 /A put
dup 68 /D put
dup 72 /H put
dup 74 /J put
dup 88 /X put
dup 104 /h put
dup 105 /i put
def
/FontBBox {-32 -250 1048 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 442 453 466] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [72] def
/StemSnapH [25 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/period <1C60D8A8C9B08A9570810981675968F2C907C696DFE9BE69433F613
9DF6C45B8165ACC43B6E0B309859F778ABCF0> |-
/less <1C60D8A8C9B08A946182837629001EAC54FD1281F4A18BF467EE8BF1F
A4E5F11D1CD86D04EA79C63FB9DCC1413FB5B352A4FBD8370F87C3B4DBCB9EE9
313F4E55D1AE212C631BD559C37D7C0B913006D86BC6F9FD4737FB80ABFC3315
AB6F7A4FDAB77> |-
/A <1C60D8A8C9B6E3FA234780E51FBD3BBFBEBC2631360DD7C25F33C30680CC
1A882C17B78DB471C55CC438374CF0500DE96583629259E66A380070E3947410
1D134A332FAD86FBF1C6C0FC85637A88280EE452A44957D6DFE9CAC4CC8C0B1E
0D8A44AD94DC0563BBBB61087D33FB01EF2295A71D594DF19B55EB59A712E2AE
76106A5A9AB8634ADA5A36204C6E39215D9DFB7BF5A23AB41B732EB6243EADEF
9003C540C56ECAAD84590980E261A5EBD6060F1EF15FD5> |-
/D <1C60D8A8C9B08A940DFCCE923E8E99B0DE594BB0556C2DF6F1C5170DCF1C
33BEEDEEF37CF3D80E507FDC8E7E37423D705C2247E0E0A8FE10C0FDF20FDA64
D06D687048CC7664230FBBE9054D83AA4EED1AFC0154695CE06B18069C8088CF
8B732AFC5C9DB618A11098144276B3E70C07DDD78A033517353032B46C8BA498
D296CBDD2D491D25FAD18588F46A09093E88D536ADF4E252BCCACAD5CCDADD5A
FB43D1C2> |-
/H <1C60D8A8C9B08A940A9C06B08C190B2F289A065F4882988E9E271604284D
AC45BFC6BB5F19B5D930811A2844871119DA277E3CD8BAE5D26CD751083A9EDE
5578B89094C34539E4B681CA19B73A7C67E8AFBCF6B1B47442FF1970BF18A7C2
FE38CF2215DEF94D1C655042B9747534917A7A108C662A40F52C26470DDCEF9C
5EAFC5108F3BBAC44061CC8FB9C683FB9E38C58160E53C0208715C8FABB16710
64CDD2C9623F8282269EE591ABD3DC6902F9B83977E2CEBDC3504F1A8AE971D9
F6F62E0385FB0B2F3C42DF0247D59A79EF57175B558D8C5EA1749C63E6579B2A
17E10033B71E434244839D098F555EB5E8D824FD0A62AE4CACBE8A311096EBEA
E6860CB54CE0224FAED173A8D316690EBCE6390BD5E415F588AEBE88817D78DF
588E2724336D8BF72332BD1D7F457D32B787B9E057> |-
/J <1C60D8A8C9B08A95C4258E3530B5B918031CDEA0AD0814ACD17F1BB5B422
A96C0092CC3CAA9035D70E575CA7BBE1B86C77ABF1D69800C851234795694CB1
C7EA05BC5D813B9272D0D3B1B266971D3278DF5E8DC546BBD7084F266A16F70A
8DE32BCE35316BCC35FDEB192E53445C864744515439B2A30C8282C9C986C2CE
379919F4CE3B37AEADA310C2124A6B1A43683CFA5F25773AD1> |-
/X <1C60D8A8C9B08A940D0B235317E910C4E520AE0EAD089E5EA45AAEFD9916
BA68992473BF411A91FC94EC432AF8D53B096E15DB5FD4F7F74AB4F7801898DB
632DDE88D09966E39E3CEF5917637245B1E09C5857D10C6EC2C3B72C44156B22
7947D2C2BAD174D396BBE53553C66510F41FAC76CD58165CC75DD8722E65FD42
8D2AFDDF6DF6BC5C2C63E8AB41323AC9A76D2739893F6401AE8CE50C05E8C70E
77CF6487AF1DA2C7000289E3D653D3787AC4978703AB3C6FBD1F3D909D4EF8A1
2855297A5F9083614E9C43A89F548F0712B48E556E9FEF189D9C6A70021E4EBF
53EAF77F4039506D9FCE722142D585A7463C9EB85BE70DA040E7BB7882A3ABF3
6EAD6E18463FDF95C255C8498855B33CA34FA7CF2D5FD50AF7BCAFE713C873E6
A7CD92AB6C145BA49B6F7763645819BAD2FEC5D156C1F779> |-
/h <1C60D8A8C9B08A95FDA51623F05A9A2A6A39B89F3D1AEC8E6882E4D019E1
EE3223B66924A1F490116934BD651EEDE67679700979054D4F9C056A7A822424
FD7D9B8BB4EF44E21D821C9BC2DC1CA0EA5B2FD8AAD4BBE7D9D6E0B70C0C2F4F
87945E636760D0AD8DADF1CA59165D8797B5050DDD7E7BA968915EF5A1AA319C
F3912D16DA7D42B75F1FBCDDF88B5B6529D3064AB3E881A082F8DB91528CD457
5C8DF1CDC6067EB5AA702E24D2E9FCAFAC4CC2CE3EEF0A86DB41A080FC8BF41B
36A612E9D38EE5FE8C1F6E730D033DB10D1CE4BD13F1D549CC26> |-
/i <1C60D8A8C9B08A959A731E0C497E4A92ECA7E1F9E8F27B95417557B68F87
3C7421EB2FEEE517FC7439284378BBF3ADDCB73BA44A09F971EA54D0742BA8E6
E7D163B9F048777BA2BAC0DF08FFCA0A02E69EB8CCA5A05D76188823DFDB0F10
2FD5B2004BF0359C21E04A38EA6E3BF721237E98B66F7D3C7171EB484B24CF2E
F1E8FAFEF505A11765C6DCFE3B2F13B0C3B87D0934CEFFB60BB3C84DA0FACC1B
8F5C53F864542A29453ECC16B47856C772CF90> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FOACZC+CMMI10 /GFNBAA+CMMI10 findfont ct_VMDictPut
/FOACZC+CMMI10*1 
[58{/.notdef}rp /period /.notdef /less 4{/.notdef}rp /A 2{/.notdef}rp /D 
3{/.notdef}rp /H /.notdef /J 13{/.notdef}rp /X 15{/.notdef}rp /h 
/i 150{/.notdef}rp]
FOACZC+CMMI10 nf
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
193.956 -438.157 mo
(X)sh
%ADOBeginSubsetFont: OOLBAA+CMMI7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OOLBAA+CMMI7 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.04 def
/BaseFontName (CMMI7) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 65 /A put
dup 72 /H put
dup 105 /i put
dup 116 /t put
def
/FontBBox {0 -250 1171 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 683 703 431 441 451 463] def
/OtherBlues [-204 -194] def
/BlueScale 0.04379 def
/StdHW [32] def
/StdVW [81] def
/StemSnapH [32 36] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/A <1C60D8A8C9B08A94017EA5BBBDF28A27C26F13EB9767FD57327186627DC9
2801E75BD74375CF708E36E30C401037EA78694EF055B14C58F3A82830D8E947
5BC6C03D87FC66ED2A50F311149D126FB728D98C04AC615ACCCEDD3742B63461
60F7F7B991539263E8B0EDCAD818644FEAE2757AB56DC05249F86E950AD749F9
CB3A00F56456704F3721B333948084020F47DEBE879305B6E840E859C077266F
65FF2D66DF6C4BE5A738AC5C8F3301160A0A38B6B1CFC4FCC172ADD17C14D45E
FC> |-
/H <1C60D8A8C9B08A94232B30537845618F482A16D8CBCF1F2D7AFA34D8C922
D16DC7BB4863EF3798FBF33953C6BCC834195FFC2245ABF4927AB51855F0B89A
90352BF7344B8F378DAFFF6194B38805CA47D17120DE16EF7B472AE8E111AEA0
873D70A4B598B1E047E900743B9EEDDF8DE14EC19629150657BA5792F4860D4F
F13F05C8864E63B720444C360DD5536BB122CF18C4B92DE91BEC6BF748FC59D9
9F2C7612BC91A9595484C780AD60D34EF487C47A2FB412841562FE3DD50D9402
CD6BADBC8C6572A5A3962B91817180DB310B02D5207265C64F64A56A90C40A63
2DCB9E5A6B378431F78F6E74BD99CA0406CB6EFC4BBB5E3FBFDDD4670900C18D
4E929284842B1F4AB442E918DFB973EB16334339C45D146F3869E053981689B1
3E3363B3B4F5D46F938FA1B9D79BBB8DBD5D63EB37B63177EB8FB4BFB4AC573D
A0EBF09CDAD3F99243C8D76658D2F84696> |-
/i <1C60D8A8C9B08A95815A5B227B870FFFF4C4C0B4F8778048834443BFCAD6
B993EDD195DC06703CEA0DE031068A057848E5B5DED1133A0A8079C5E208E9DE
E4B78459A9167CC6EE455BFB1096DC5790B66EB4889F8492E36379969C9A84E3
508BBE89B995851364166046AE348187165B183267917A2B944E4D5A171FE0A1
71814BE20051DD45E2BA864A9940A362E73075986328AA3660DC7C3B40F26477
32F933A170C61C13A84CF06AE8B2A1FC77DDE376> |-
/t <1C60D8A8C9B08A95B444552627C816AB8C57693DE6688794FFBF2650DC91
CDFDCE895DAF713B4EA41BEEEF3F9DA86DCE6AE10E3A624D4BAA8FF0EB028E7A
6391F232197AABF094D77DEC948820B3331DD9D24310D1481B2C8E22E2F63BDA
F6014E8E3738BC39E336E4A7F2EE1CE051CFC02F80589DCBCF70ACF33F38D051
AC5232B52999E751EBDBA573C56BE266B285772C6064C7FFEC> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FOACZD+CMMI7 /OOLBAA+CMMI7 findfont ct_VMDictPut
/FOACZD+CMMI7*1 
[65{/.notdef}rp /A 6{/.notdef}rp /H 32{/.notdef}rp /i 10{/.notdef}rp /t 
139{/.notdef}rp]
FOACZD+CMMI7 nf
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
203.081 -436.478 mo
(t)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
206.801 -438.158 mo
(\))sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
211.121 -436.478 mo
(t)sh
%ADOBeginSubsetFont: UGXAAA+CMSY7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /UGXAAA+CMSY7 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -14.035 def
/BaseFontName (CMSY7) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 21 /greaterequal put
def
/FontBBox {-15 -951 1252 782} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-23 -0 683 708] def
/OtherBlues [-127 -117] def
/StdHW [49] def
/StdVW [93] def
/StemSnapH [49 61] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/greaterequal <1C60D8A8C9B08A94125A6B4F8A652FE16B61F29641C73D062
78369F860ED1BB827BAB01DE4567BA4C9872181A9C559665362C4D961AE4FDA2
C4A7580B081A33B3D8C5E3E0DB943834789BEA654E8E54ABA9A2EB896D51EB24
6B2B23A64458670AEAC3E7E27E35236657ABDF05CB4917F0193C27665DED70C3
9C66D9DCB6E04A356CC029FF5> |-
/.notdef <1C60D8A8C9C43E51220C40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FOACZE+CMSY7 /UGXAAA+CMSY7 findfont ct_VMDictPut
/FOACZE+CMSY7*1 
[21{/.notdef}rp /greaterequal 234{/.notdef}rp]
FOACZE+CMSY7 nf
FOACZE+CMSY7*1 [7.6712 0 0 -7.6712 0 0 ]msf
214.481 -436.478 mo
(\025)sh
%ADOBeginSubsetFont: MZQAAA+CMR7 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MZQAAA+CMR7 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (CMR7) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 48 /zero put
def
/FontBBox {-27 -250 1122 750} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 683 703 431 446 664 674] def
/OtherBlues [-205 -194] def
/BlueScale 0.04379 def
/StdHW [36] def
/StdVW [79] def
/StemSnapH [28 36] def
/StemSnapV [79 95] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/zero <1C60D8A8C9B08A95C25148D4A67F69E30A5E2E68739C66430CE9C80B1
17D356E6B049D46F4B92CAA553A9B134551915D583004A2E168290E2EA7A1D2E
BEEF2F6191D2DECAFE6B7FEE755131DAD42C252CF3B9D1F495CD04CA729594BC
959DCCEFD3CEBDA487CE7F4CB3AF00007678C40E3EBD5D978707EE8CD3F292AE
B3E78ECCEF035CFEC> |-
/.notdef <1C60D8A8C9B08A958AA685092D4752> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FOACZF+CMR7 /MZQAAA+CMR7 findfont ct_VMDictPut
/FOACZF+CMR7*1 
[48{/.notdef}rp /zero 207{/.notdef}rp]
FOACZF+CMR7 nf
FOACZF+CMR7*1 [7.6712 0 0 -7.6712 0 0 ]msf
221.324 -436.478 mo
(0)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
230.441 -438.158 mo
(is)
[3.00275 0 ]xsh
-119.356 -424.722 mo
(minimal.Soif)
[9.11554 3.03342 6.07999 3.03343 9.11552 5.46631 3.03342 8.04164 6.08 9.1156 3.03342 0 
]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-47.1151 -424.722 mo
(H)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
-37.1591 -428.678 mo
(A)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-26.3591 -424.718 mo
(isthehi)
[3.00273 8.03285 4.31789 6.12602 8.39452 6.11507 0 ]xsh
12.6328 -424.718 mo
(ttingtimeof)
[4.31131 4.31131 3.00714 6.14136 9.00165 4.31131 3.00711 9.11115 8.51947 5.52765 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
76.8409 -424.718 mo
(A)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
88.7204 -424.718 mo
(forthejumpchain,then)
[3.37753 5.50357 7.92545 4.32007 6.11728 8.3967 3.37753 6.11725 9.1528 9.72275 4.55011 6.12823 
5.50354 3.07071 6.11725 6.72 4.2872 6.11725 4.88986 0 ]xsh
FOACZB+CMSY10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-1.39468 -396.641 mo
(f)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
4.1286 -396.641 mo
(H)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
14.0809 -401.078 mo
(A)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
24.281 -396.638 mo
(<)sh
FOACZB+CMSY10*1 [10.9589 0 0 -10.9589 0 0 ]msf
35.7988 -396.638 mo
(1g)
[10.9195 0 ]xsh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
55.3604 -396.638 mo
(=)sh
FOACZB+CMSY10*1 [10.9589 0 0 -10.9589 0 0 ]msf
66.8782 -396.638 mo
(f)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
72.4015 -396.638 mo
(D)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
81.8809 -401.078 mo
(A)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
91.961 -396.638 mo
(<)sh
FOACZB+CMSY10*1 [10.9589 0 0 -10.9589 0 0 ]msf
103.479 -396.638 mo
(1g)
[10.9195 0 ]xsh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-119.36 -368.44 mo
(ando)
[5.51562 6.1293 9.72383 0 ]xsh
-92.4752 -368.44 mo
(nthisset)
[9.70848 4.3168 6.12492 3.00165 7.93311 4.31668 4.91946 0 ]xsh
-44.3568 -368.44 mo
(wehave)
[7.54301 8.6389 6.1293 5.15398 5.41698 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
31.8404 -353.438 mo
(D)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
41.3209 -357.878 mo
(A)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
51.401 -353.438 mo
(=)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
63.0393 -353.438 mo
(J)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
69.1609 -351.278 mo
(H)sh
FOACZD+CMMI7*1 [5.4795 0 0 -5.4795 0 0 ]msf
76.961 -353.438 mo
(A)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
83.561 -353.438 mo
(:)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-119.354 -330.753 mo
(Theprobability,startingfrom)
[7.89809 6.12273 8.51178 6.12274 4.32545 5.52 6.12273 5.52 6.12273 3.03233 3.03232 3.03233 
3.96391 4.79672 6.72546 4.30353 4.32556 5.52 4.32545 4.32556 2.99945 6.12274 8.99396 3.33917 
4.32547 5.51999 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
28.1308 -330.753 mo
(i)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
31.8569 -330.753 mo
(,that\()
[6.84274 4.32227 6.11945 5.51672 7.79623 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
66.7719 -330.753 mo
(X)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
75.8809 -329.078 mo
(t)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
79.6009 -330.758 mo
(\))sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
83.9209 -329.078 mo
(t)sh
FOACZE+CMSY7*1 [7.6712 0 0 -7.6712 0 0 ]msf
87.2809 -329.078 mo
(\025)sh
FOACZF+CMR7*1 [7.6712 0 0 -7.6712 0 0 ]msf
94.1236 -329.078 mo
(0)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
102.521 -330.758 mo
(everhits)
[4.91287 5.40604 4.91287 8.04709 6.14029 3.00601 4.31021 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
147.157 -330.758 mo
(A)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
159.036 -330.758 mo
(isthen)
[3.00275 7.91229 4.31787 6.12604 4.90958 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-24.9201 -302.922 mo
(h)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
-18.5591 -307.358 mo
(A)sh
-18.5591 -300.154 mo
(i)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-8.35905 -302.918 mo
(=)sh
%ADOBeginSubsetFont: ELRBAA+MSBM10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ELRBAA+MSBM10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (MSBM10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 80 /P put
def
/FontBBox {-55 -420 2343 920} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0 685 704] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [40] def
/StdVW [40] def
/StemSnapH [35 40] def
/StemSnapV [35 40] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/P <1C60D8A8C9B08A95F2616DBAAE74C39DA7770A851E0560C5C5766C4EE6A1
DF986461A916CFA35CD298EC30CE78935CB4B424FABA6BBD0DB6416EEB8A4F23
9B922D0D162498B6F12A4EB2DF492E41991EB44DAA08F6DABC28A2F089963084
006C8CE28E28458B3C150F1339C403581C78B64F2F54ED75EF39ACF63384CCF4
A55A286CE9746BBE4DDCC835778B626FA0394FE0B5731C5DDE700C3E79BBC812
726188292F837CAA41A74D605572FA4C7E74E65326476F682B58D64B4999F90B
3A19DF8A1B8EA44527BE0711E2B5F2CE3A346BD7799399600C261F6DBBE6E14E
1B8AE3F0> |-
/.notdef <1C60D8A8C9B83E2D40> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FOACZG+MSBM10 /ELRBAA+MSBM10 findfont ct_VMDictPut
/FOACZG+MSBM10*1 
[80{/.notdef}rp /P 175{/.notdef}rp]
FOACZG+MSBM10 nf
FOACZG+MSBM10*1 [10.9589 0 0 -10.9589 0 0 ]msf
3.15875 -302.918 mo
(P)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
9.88095 -301.238 mo
(i)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
13.6009 -302.918 mo
(\()sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
17.9187 -302.918 mo
(D)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
27.401 -307.358 mo
(A)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
37.3609 -302.918 mo
(<)sh
FOACZB+CMSY10*1 [10.9589 0 0 -10.9589 0 0 ]msf
48.8787 -302.918 mo
(1)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
59.7938 -302.918 mo
(\)=)
[7.44116 0 ]xsh
FOACZG+MSBM10*1 [10.9589 0 0 -10.9589 0 0 ]msf
78.7527 -302.918 mo
(P)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
85.4809 -301.238 mo
(i)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
89.0809 -302.918 mo
(\()sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
93.3988 -302.918 mo
(H)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
103.361 -307.358 mo
(A)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
113.561 -302.918 mo
(<)sh
FOACZB+CMSY10*1 [10.9589 0 0 -10.9589 0 0 ]msf
125.079 -302.918 mo
(1)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
135.994 -302.918 mo
(\))sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
140.312 -302.918 mo
(:)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-119.37 -274.72 mo
(When)
[11.303 6.1304 4.90302 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-87.4472 -274.72 mo
(A)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-75.6883 -274.72 mo
(isaclosedclass,)
[3.02136 7.91997 8.99397 4.91727 3.02136 5.52 4.29257 4.91725 9.60767 4.91727 3.02138 5.51999 
4.29257 4.29257 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
5.1884 -274.72 mo
(h)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
11.5609 -278.678 mo
(A)sh
11.5609 -271.835 mo
(i)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
22.241 -274.718 mo
(iscalledthe)
[3.00275 7.91229 4.90958 5.52328 3.00275 3.00275 4.90958 9.60001 4.31787 6.12604 0 ]xsh
FOACZA+CMTI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
82.8437 -274.718 mo
(absorptionprobability)
[5.62521 5.06638 4.44162 5.63617 4.64984 5.62521 3.59781 3.36774 5.62524 9.83337 5.62521 4.07996 
5.62524 4.44171 5.62521 5.06638 3.38968 2.76489 3.38965 3.59781 0 ]xsh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
186.164 -274.718 mo
(.Sincethe)
[7.92218 6.12494 3.00165 6.12491 4.91946 8.39343 4.31677 6.12494 0 ]xsh
-119.359 -260.438 mo
(hi)
[6.12493 0 ]xsh
-110.241 -260.438 mo
(tti)
[4.32118 4.32117 0 ]xsh
-98.6028 -260.438 mo
(ngpr)
[6.12492 9.3578 6.12494 0 ]xsh
-72.685 -260.438 mo
(obab)
[5.52 6.12273 5.52 0 ]xsh
-49.4083 -260.438 mo
(ilitiesarethoseofthejumpchainwecancalculatethemas)
[3.01698 3.01698 3.01698 4.32118 3.01698 4.91287 8.03613 5.51563 4.32108 8.75945 4.32118 6.1293 
5.51563 4.31009 8.63892 5.51563 7.32382 4.32117 6.1293 8.63892 3.32385 6.1293 9.09909 9.9649 
4.55127 6.12927 5.51563 3.00604 9.9649 7.55399 8.88 4.91287 5.51563 9.9649 4.91287 5.51559 
3.01697 4.9129 6.1293 3.00601 5.51563 4.32117 8.51837 4.32117 6.12933 4.91284 12.9566 5.51563 
0 ]xsh
-119.37 -246.279 mo
(in)
[3.00274 0 ]xsh
/1 
[/DeviceCMYK] /CSA add_res
.870146 .314549 .49305 .0830091 cmyk
%ADOBeginSubsetFont: PBAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FOACYZ+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73D3B2B97DEB4C7BDB68E0D63865C8BF294429AD1BA
AE59A25299F9306A9E28AA5C0C0AF9F97F56096DB0FD0EC440ACCE834B0BA539
2FD94D026768A961AA5D1A88FAE30F2B2033E77AFAB55B0B9C8092CD226DD9EF
EEAAF5CD5AE79D6DDEC4C37DC43DE3B85DD2A2EC4DC0C9F349D5E8F9F615782E
DC8C53805553FD3C0007C1818BF3D99AB659A079ED36132BBDC613CA63D7A0FE
429706DBC6BA998CE56A89C002758EF37F90A390F83B3DFE49D312FA66FDF2F1
6212D1503559B35FC2DB8BD5A49535> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FOACYZ+CMR10 /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/FOACYZ+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period 2{/.notdef}rp 
/one /two /three 9{/.notdef}rp /equal 21{/.notdef}rp /S /T 
2{/.notdef}rp /W 9{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /.notdef /l /m 
/n /o /p /.notdef /r /s /t /u 
/v /w /.notdef /y 134{/.notdef}rp]
FOACYZ+CMR10 nf
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-106.526 -246.279 mo
(Section1.3.)
[6.12602 4.90959 4.90959 4.31789 3.00273 5.52328 9.59999 5.52328 3.00275 5.52328 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: AXNBAA+CMBX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /AXNBAA+CMBX10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (CMBX10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 46 /period put
dup 49 /one put
dup 51 /three put
dup 84 /T put
dup 101 /e put
dup 104 /h put
dup 109 /m put
dup 111 /o put
dup 114 /r put
def
/FontBBox {-301 -250 1164 946} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 686 697 444 453 655 676] def
/OtherBlues [-201 -194] def
/BlueScale 0.04379 def
/StdHW [47] def
/StdVW [114] def
/StemSnapH [40 47] def
/StemSnapV [114 142] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
10 dict dup begin
/period <1C60D8A8C9B08A9560D4C2F3A74D92838E83B7DC14B89478B799496
0CFDC6D2144A34A20CA36052335682902BE7739DD> |-
/one <1C60D8A8C9B7FCB6AF8364FFDD07AFC90369AA09A92DA6A5FA1F27B147
3229121209969E0325A5375000F01DC5F64BC963E21B3BDF52473FC214BF8832
F90F8117074A5E7534B453F93CF3A66D18273E9726D0A516F1AEB2FB2E> |-
/three <1C60D8A8C9B7FCB6A4EC6CFF5B7E8A646CFA99E79027FA1E27F1D442
DE8AB71A39759F5525E707D743CC0FEAB4033857D7F0B4C7A6F8FBFB5A935099
B429C99C13203178EEA9B1073B247ECB796B06FE996B3D05FBD6A7E0F21BE1EA
DC781E6E7F5E6ABC5A7404FA09CF5B65949D8D09BFC8DE32902F3BAC8BD07286
D74960DD2AB72945FAF8256AADFA01A34A0D1646636F1A5CD2616092FFCCA26E
BF6D5C28875F2B3DBAFD204CC9431C3EAEB60A528610CD3C52A0484A51A3990E
2EE8A4670066476DEAB7B4E111D8989AC76A29> |-
/T <1C60D8A8C9B6D5A02F45D696DD3DBC967B9ED5E368780DA8AAAE735C531E
4A1CFC5B5120D4AD9C9816FA1E7AC38CDE3B2683779716D4A81756CD8C4C2855
1557F84045B2BA21F966C955928E854739467C04FAD5E00423C1DC73F04DCE40
857293E7C9> |-
/e <1C60D8A8C9B08A95D1DE8AA71D3914AC9DDC5BFDDE55301EE17DAE184B08
E53C36FBF9A44FDF3309DBE08895DBFECCF103737D7326528346FD01CD1D9FC3
874638E8C50ADE3B494897353EB3188B512405DD1BA5DA59E8C179230F7C8D15
AFCEA2228DAC03C77D614B36A41126CE831B41CDF160A67B175BB36C52353A72
5460F4256C> |-
/h <1C60D8A8C9B08A95E5CBCB515510A1C1813129980C781B54288D40018C5B
93853F82E0244B3A80F2AFF47EBF96B35DA26DEC133310C6696AE9311BDCB375
BE0DE07C5DB0707F8F0FC67E647A0932D6F1A6B132F19C039D0B352755D3933E
5FF86EFDFB050094707E014D5945768F10389741F2891022CA4301DFE2F69D64
F95B9AEA9F917E9D944357C00D6954781ADBA230BC7F882BF2F37EED59329208> |-
/m <1C60D8A8C9B08A943819E9A7E2C5069B3F1B2D03CD1524D83A2D258C3F82
7FDF54BB18B8E018C9E485A8758692DA911442F02B16C6D7E25E270A5B8A6A8C
7DEF1416C01E6971515B8D686564649501B9C9691C0C91133CA82046E1CA1A43
ECFC2A099918E4C07AF07C578A6F03510EA4775A94DF6B5F8A1F2DC6E05F04E0
3FBC77DFE24BFC861B465CA5E9B06746DBFF2CCEEF646BC3B21D87DF067C9541
B3F8C73A6A6454FA60AE3B103BE57625AE64D1F32D3A038C3774967993C5B464
1E657CA3E74FD8D246A9B41D2454289B45> |-
/o <1C60D8A8C9B7FCB6A15C803B3B972EE31F5A721ABF9B8490D1BCABFAF507
3D6D0835AA64493F9EC5B8BAE86BFF5C8028599ED438B3807899BF98EB3DF2EE
9BBE5DC52FDB77ACA45EA052A40521B13F529CBBBB8B40F192297C658BE1CF97
9B5618AA4355B6A77C9FC09641> |-
/r <1C60D8A8C9B08A95A5BEE1199161ADD44E11DF3EE5256B86CB844423336D
E46331FBB74D12BB9F1AEFB0A2D71E0DF1B1DC77B76B07C229AACC6761DB2E5D
20458478ACD0A771C83355B8FC81A73D829FB4F43E6F698652C8F5D32976536B
BF9A5F05ED7F73E5DF2B81BA043D0A8270F63D03627E6ED4C69187B17F057818
B58504577A> |-
/.notdef <1C60D8A8C9B08A95899606B6B060A7> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FOACZH+CMBX10 /AXNBAA+CMBX10 findfont ct_VMDictPut
/FOACZH+CMBX10*1 
[46{/.notdef}rp /period 2{/.notdef}rp /one /.notdef /three 32{/.notdef}rp /T 
16{/.notdef}rp /e 2{/.notdef}rp /h 4{/.notdef}rp /m /.notdef /o 
2{/.notdef}rp /r 141{/.notdef}rp]
FOACZH+CMBX10 nf
FOACZH+CMBX10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-119.37 -222.4 mo
(Theorem3.3.1.)
[8.74633 6.98199 5.75444 6.35722 5.17369 5.75444 15.3544 6.35722 3.47507 6.35722 3.47507 6.35722 
0 ]xsh
%ADOBeginSubsetFont: YEKBAA+CMSL10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /YEKBAA+CMSL10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle -9.46 def
/BaseFontName (CMSL10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 45 /hyphen put
dup 84 /T put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 121 /y put
def
/FontBBox {-62 -250 1123 750} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-22 -0 683 705 431 448 666 677] def
/OtherBlues [-206 -194] def
/BlueScale 0.04379 def
/StdHW [31] def
/StdVW [79] def
/StemSnapH [22 31] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
23 dict dup begin
/hyphen <1C60D8A8C9B08A959E2F69652E8B76AC2AC5975325947EB621767F2
5A61BD08BF5E3B0CB0C6E> |-
/T <1C60D8A8C9B08A9454CA4C75C5C97DCE7AB2AB1DCB0160828F9A9F2AD0B8
49733FA1AF45FA9A71DCDC7349510B55890E61DC8EF8842EF39FB0A7A231393D
B29BFCF2E355D66110AE3EDBF6458D33E72D7AE6F136300D2207F415FAD55B51
78DB79808AA2DC84D6E0BB462256585FF7925145BDACCF5260D90D46598FA740
9108BF67B0DC71BC69DE009524A0F10FB315477C3F597A0BDF84C52ECD> |-
/a <1C60D8A8C9B08A950F43F3DB4431AFEB433AF5FE3C9D901A80C684740066
757A222A831AF96BD4971E01632DE6EF74A5B7083C0FDCC26EA0F742D4EA8A2D
24BDAED01520B4FE7259EEA67B2B74468C3E81326E84EDF1F3F322BE4413BAED
6E4AD0C48E59DB120EBE46A36F75B6DCEB18F4D4D09F56D830F6CA696F8E867E
C540ADE17EC39D8FDFD4764C0B1BB7098B28F42FA743C99F450BE377483DF4A6
7DA34992CDB8E5B27DF3DEFBD1C8AE09857AA7A3EC70D0451EE65D5CD5F709E1
7A922CAA1AC8B1EB20> |-
/b <1C60D8A8C9B08A95C5897169EED96D271CC0A201580A85BBB6C2C7EE621C
94FA3F39557B1122D37DE8010C6324B21D7056B9B12FD5254843F5E643CE76EA
BD7FDCB14E5B2F4E294041678861EF407752C077832F2FA9166D746D569936F9
EC2EFF5125A6A4D3BBCB9A731158561ECAB3687ABFEC678DED3BFD60CF56200B
1C9F4AD0005BB220F7CB0A3A50DDBF65D050A11B1D820426A6978AEDCF0EAC15
2EF9D49C> |-
/c <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC56320CF70CDA88BE9152AA41
2FD9FB155F05620C6B009D9EB28E3DA3C6A949B0782C7652307ED50EEFA20586
7713A7FD55811A5557660ADD7504900D68407A3653D4298264E2D63DB9D8F4D6
3A926937C0ABD715EB20C84B49336F2769BF355D8952A021827E37BD> |-
/e <1C60D8A8C9B08A95B1F07368C45D8D2AF4BC97E4CB216B2078048365224F
D23A2161D369E0174CD880A9C149EC8B5260A268C147EFD3A705871029A509D6
DF2FC399F92F0974A9AFB60205793D3740EEB8486495275C15E0463174D7887E
068900D03723630B8FB82CB3EA2C56316F4286CA10D6D5E4874FDAC176138B84
D66B60744A4F277FAE7820> |-
/f <1C60D8A8C9B08A956BA65798425CE9B0A78F07A04AF3D61C74364DD4D3AE
86C889AFADD792EEB1CD83712B350DEC56305A8AD47CDFEF73B2513EF10DFC35
FA3D14D1747950696DA34B8C6B8E001FE2365BA5B3FB65F152F694FD56AE10A7
3FA74D81BB9FDA078B644B0F77B5CB79BE83F72B604F60B9C30DB05B2E173E4A
007403D863CDFA0B1A3A60177CC10FB6739248213E065B83C3DC47592E03E1B1
6E0712D5866E> |-
/g <1C60D8A8C9B08A950F43F3DB4431D442ECEBF1CCE5F0031E33A4A9905C73
436D3711E8EA11790505421A3448A085F1DF409E218431A409ECCFBCB5687425
5B23C01E85A96C14CA349BCF4B6D852D251F439CDADDD98B1F072972527C2738
0472C635C2097E255E0953EA8B1D19F92AA76FC970F9D786236E2AEBAF2CCB1F
821B8F7B498E1F9088703FC0173AFCF02E5E3056F369EC8195EDFF036E160ED0
D8A32588CAA6AD6C40AF48A26004F2D76BF3BF61627844BF90D12C9F0108C163
118CEBD4ACD16482200F7D8D0A56822F24EEC83B176FA097B6C4E72DDA669D5D
3C367FA8700CE1016EFA59987F25F6CDE90C9DDF34146B72B59D0AE22332052F
60465EBDB5> |-
/h <1C60D8A8C9B08A95C5897169EED9664BED359D179BDDBB0B44F80713129D
0AD4CF0D57377AAC7F11986EC4C3494333DE062432DD653E3F4AD3A592CBE3E8
73DA8BB11EEAD13893884216EDD48452F342DF4E995A579A465C15955DF810B2
5E716EC627582D36DBAFD126893F0D280EE7D52E172CD6D89CA4BA8F81DEA99D
ED95FC8C791DB5BA83481F3CDD70333E6E60CA79B7BBBE1FCE201572325B4FA7
CC806431CC40C4174B4EB9454BC44A7C42DB6B6921665CC24047AE6EBC26C67B
3205FB159E12C9FDB629461CE17733634455CC70B6F84DC3BC> |-
/i <1C60D8A8C9B08A9570810981675968AD25F24D2B3EAE33A4AEDA9E02A5DF
D584F698F0096D519A69B54BE0AF672BA5D07A4D79E4BE634CFC76A998765D2E
202DEE56A954A6CEE3702FB8913DF409BD5C17DA40DA0F857979D89F27FDB0C4
3BA4D2F6C4BABEB1EA20DCFDEF080517760F29A5FD416A1D87A9B7DB5AFC61DD
4FE181AFB1B78C1FE1D1A3> |-
/l <1C60D8A8C9B08A9570810981675968AD25F31706150B09BF710BA3A066E4
88076DA35777CDDA08FA09C606725867AF764EDC49A4C7C99B3BD7C46749C2CC
0D78D91DECBD6CD64D95FE42406CFEDB56003A80493FEA0E8F3A6FBAD0A9DFCF
82D26D07133B2644DAC294F17F> |-
/m <1C60D8A8C9B08A940B724A74A01E176AC76C178E5391E85078E6F1B3D6D1
0FDE5CF720146C72631B4FC4F04C45B71821645D025F592EBE86A6776F6F1F6F
B6C6050E614C8AD1A4B7F603CD7F737F486354B013478B9FE01982D21029D00B
B23A81A7E484D0E31E063AA1E5596F34F075CF12984C2945144F3A65A2F5FC64
BE2D60130F18EF4B51769B33EECB42940BB5CCB42C4958E70DC35CB913A888A1
38F219D41DA1A431133D463A14985D22CC13C1A34077CD5693B192B7A93E0404
1EE570292ABBAD08D127FC92BD0EDCBD00946DBD48494140912B03FB7599CA81
279A7FC8AAFCF9F60B517762371AB8A720273E5A81233076FC8F0A506CF7EFDF
51CFDDBC28E7ACE99AE4A4305C86C2B23F6FCBB3B597A332C4D892BF59DD1888
F86E65F0D4A119BE3019BFD563BE5087> |-
/n <1C60D8A8C9B08A95C5897169EED9664BED359D179BDC9CEA255E57CC6138
19485AA013046DCF4C6001B23CB754767F1148BAF072D883C42724BA58C29F32
D9163A8A5D1DD90A0B8D0CDFDC84425C599996BD93399AB4E89783BF33253B38
70B3A3675608917F663AD6F8C4AD11A543DE5556D73A5C7598071F1459315FA4
6074CED0693C085C3AF3E33452B00BF4214DB8FE3E55F6AC67408ED32CB6185B
BD276165F5EFAACFDAFA35ABF42849DCD091D4331CCF1F7803AC593AA13AE684
97D945EB19792703EB84A0B022> |-
/o <1C60D8A8C9B08A950F43F3DB4431AFEEAF4B3E8981C4D6572D43DA50CFB4
F38B4A0702ED9DCE622672B5288F2DAB93E6F2044C03B4DA629E75CF6ECA921B
28E2ACD7E29F395AC65B6FD1F47E9BAA92A3224C2756CBC62084DD7F493FCCD1
E9FA56FAA93C7B5D114298FE13B2E2B8F4BA2B3A> |-
/p <1C60D8A8C9B08A95C5897169EED91609D9E4D5F91353A54E37D27426C61F
000839B875200A1A732435F5D50B9657E107F3079F0EF803E3F1B07842858B45
211DEB17F705E70AABAB804D8A37B12E424AE0E1834EB328A6372C387C5FE247
6FFF2441314D4D6AA7025608ED329BED7CC20C15CD249778FB8E5589B0A61A4F
6F06B32DF2263977D3EF0172370AEFC9C0FC0A53CE248735C6A488882E1C806B
4E> |-
/q <1C60D8A8C9B08A95D222871B45C8677AD60861C3F9215D832C787AC3CE48
563D25248382260A6F532827B8B42A69F4D7777E454BCE281BC4AE263E7C7565
5EB3C3BB5A1BE66C8EC92418B474E16E83F311296E60C43DC5E0757143814B3E
E7338DD06C1E5A76C24F38A43F6E2A8E069931D9D51378A985B9BE13AE61AC0B
C43C1D5D169977BA5F8564E2950A64BB2B326584D7BEACD812F596A9C4F9CE6D
83B2E6CD62061EEE1B38BB94BF0254E58A> |-
/r <1C60D8A8C9B08A9584DCB847BA986212E50A1268FF1D690F40C92ACC0E2E
9ABB467379E03850CC4C672BCCC8400FDC82C5EA3FA7EC4867AF0034728F453B
3A88B7DA1411826AF3B8E82B326953DD803989B72DF8D3B74915E2D63DE86094
E085686F0FA9663E37831D24EA058EC257E4F0739C0AC254055DCFC21DA98F72
179534C1BEF047B35F2F256DD44B427DF3B312C4070654F70CDEC0C332> |-
/s <1C60D8A8C9B08A9586D4F7B21AA9B0967A13D9D7A462A1CD0AD211D50C92
81F552019D2441C2F604BDC661057DE764380B1F9B15C8989BC79AE4BDD7D91D
6040E4D137B8BBC28170692BCDD0C3A8A58CB40E742030EA06535D53D3454D30
83D9E63295E9129A72CA196A7CEFAB85BFF781983AF54EC18219B6DF81439EB7
FF494E32C0AFC36B5AB55A5254087E988E74CFB9CC16A924A78F2B6462FFA99C
4F1B2BC1F4887680382A5D76055AF08173A3F50550B5153D6BC8DCF17B6E9497
1C46AE31692D43AC8D0EDECC67C565AD43CBFC6241B6EF36EFCE> |-
/t <1C60D8A8C9B08A958B2129D6E9766AD6B32BD7C1B99D302CB024956EF34D
3BB3B978BBC7F57B4C9A7747DDFA7FF9B5734F2605B9805714C42C77FE49E34C
712F9CEED439E633C12B6630D5E6281EB485961C69A8E422F968B68B45E5D641
4B7454AB16248003A3A0D1066EA1AC38BDE52AF84FACC8BF4FE3D3BDF37CA0> |-
/u <1C60D8A8C9B08A95C5897169EED96D271CC0BE81723554D931CC77D45308
B3CCE1962966AFAB595D74B69E0028083EAD57A4D6BC4CB69D271B460B3CBD34
A983B92B1A51EFE323D5C2DDF1720D3F5AD82FF167A9CD280CFB6EA220A0D8CE
CEFCF7D5EAD7AF661F92E3F512BD836EDF0BB908B8CF67BC071D3D9DE66A5A37
0886D62D9E48809B258E1C7CDE3B0F269B4C612F0328B9A95B6CC5D5733EAE48
3308DEE2647D31C038CA8173B27700DC2E940E52307727B0> |-
/v <1C60D8A8C9B08A95D222871B45C81C126204E8A3F3905852271F21D9D438
28D44C1C19D0A404E1A5F5DB487FA1E7FA4601496D13CA9A568494B3D84AB807
1893386BF9E3F0AF5174CBE8C3EB2CEFD657E990166F23D8DB3413BFBC15164E
7EC3C334C7D4FA9208338447E8A923E2F47BE6B51850BDA2153EAF7BC834E8D5
A93E18F476BADFE67D8DA1C45E2114> |-
/y <1C60D8A8C9B08A95D222871B45C8674D920EF0FEEECC54BBD2C7FDA80C10
4DD01083CFE83D4D8BB72954A9B7AFCDCB1FB03F71CC0D9251B10201F9CB1EB5
E1613E90826D88120D546FEA0C1F3E6EDEAD6AD496A43A641381BDE0215EC91B
9997FD653677997A97A8B639F3F14A46804309D880C6CD3F65329DCE444A41C7
C4D933F5FEFB740DB1F26EC222300BBA16179CA370B239462D963E2B59BB574B
12E23570EF05FDFA8AB2947513AE63233AF745563DE236916420> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FOACZI+CMSL10 /YEKBAA+CMSL10 findfont ct_VMDictPut
/FOACZI+CMSL10*1 
[45{/.notdef}rp /hyphen 38{/.notdef}rp /T 12{/.notdef}rp /a /b /c 
/.notdef /e /f /g /h /i 2{/.notdef}rp /l 
/m /n /o /p /q /r /s /t 
/u /v 2{/.notdef}rp /y 134{/.notdef}rp]
FOACZI+CMSL10 nf
FOACZI+CMSL10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-29.496 -222.4 mo
(Thevectorofhittingprobabilities)
[7.88054 6.12712 8.87782 5.40382 4.91069 4.91068 4.319 5.52438 8.28598 5.52438 7.56274 6.12711 
3.00385 4.31897 4.319 3.00385 6.12711 9.48056 6.12711 4.31891 5.52435 6.12714 5.52438 6.12711 
3.0148 3.0148 3.01477 4.319 3.0148 4.91068 0 ]xsh
%ADOBeginSubsetFont: GFNBAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FOACZC+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/comma <1C60D8A8C9B08A9570810981675918D0BCF1CD202F5F15202B7A6E1C
EF0947ED02AAA4C366CA78E08C39B6DD0700901548AC0500952501F57D43D699
1493A7332E9D6FB3B92D3B17F7AFEDFB43B1F0997B51EC481BBA2E83EB27> |-
/I <1C60D8A8C9B08A95B7F5ACC613F6B3C325D2D93319F2015FFFE4282C6E2E
684BD9A0899B612622DE510E9D81F1393E97B8ABE9001E85B3C19537AC21F2D6
576D802A6FFC6FD2CE0D7205A244F0D8CC199FB185FDD683EF73633E5FCF7D83
ED16B0C09734E6E27F3A3632F360D9D66573B137467C25F0A53272CE249C9B25
38B391E3645ED8E36947D37C8636D50B6E19DD93D65D> |-
/q <1C60D8A8C9B08A95B25AADE07872936873F15BC637AB9FAE860A495364CB
E24AED381E47326FC805BED7EA5492CCD73F0A1FCC71E7FB0AE39D1B23506018
4BB567E42F56313EE417C8CEC733823094B9D5FA7D5AE1E3C8D6EE5766960764
77DB9F4A008572796140EDA04FAF291509535D2A45848AE4B63F0F0B7D7D418E
18879132B305CF717DA36F21B0799382F70512F20A4528CA1A2ACC55A158ED52
6AF8E29CD7950ABD1F5425715BF27997C61FC3A0734599C5> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FOACZC+CMMI10 /Encoding get
dup 59 /comma put
dup 73 /I put
dup 113 /q put
pop
%ADOEndSubsetFont
/FOACZC+CMMI10*1 
[58{/.notdef}rp /period /comma /less 4{/.notdef}rp /A 2{/.notdef}rp /D 
3{/.notdef}rp /H /I /J 13{/.notdef}rp /X 15{/.notdef}rp /h 
/i 7{/.notdef}rp /q 142{/.notdef}rp]
FOACZC+CMMI10 nf
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
139.468 -222.4 mo
(h)sh
%ADOBeginSubsetFont: OOLBAA+CMMI7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FOACZD+CMMI7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/I <1C60D8A8C9B08A950F0C991472A51DF174A5947D11666C6E13FDA5A2EDDA
05A51648EA811F60691571528F96D33321C1725544D832A15B6C18083A580A09
EC6670819CCBB61D1437F9DE2F7E14C631007EAEC0F28B1F855E46D19CE2CC3D
B490F8C50C5922CAD2829745670B5C2F805552F113286FBC7C3622DF717859C4
3AE385AA296DA1535FCAF0734226D0CD424697747474EF65FF7BAEECC78728F0
EA399EEBB4DC3BDE32718584> |-
/j <1C60D8A8C9B08A95A459ED963FAC90DCB8AB19427A2E40264805DB4EDBB0
2766E4B34CA7BAD7FF617D8417ED8A6BC153BA1967F1D42765023A7119DD1DDC
AA11377154A7B1BAFA2DCC082A2A1C19723210E8849DBE1BC9C1CEBAF2FCB286
C5C9C9DB8B4193FF060AE6597E7B810C70EEAAB327A532B6D2D05139A3BF532A
BC68B871E1474F59A1F5D79B984E40898D4B8E24132D075846122C1C9EF2ABA9
7B08BFCE9BD5F6341F9504> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FOACZD+CMMI7 /Encoding get
dup 73 /I put
dup 106 /j put
pop
%ADOEndSubsetFont
/FOACZD+CMMI7*1 
[65{/.notdef}rp /A 6{/.notdef}rp /H /I 31{/.notdef}rp /i /j 
9{/.notdef}rp /t 139{/.notdef}rp]
FOACZD+CMMI7 nf
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
145.841 -226.478 mo
(A)sh
%ADOBeginSubsetFont: PBAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FOACYZ+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/zero <1C60D8A8C9B7A73D3B2D32309B1F5D5A32FC3614834F8BC61B6EB92C1
2484BD76628737DA40CF9DA1C97CCDAFB1D1B732C642F74A7C41B7D3AC6DAF8D
1E760692B6EBD2417EF1893A4AA0B1CF049D4C54D830CEC073A9153D451FAD42
892B0930AEE4FE18588336BFDAD60D8A4F4CFFED76F103FB9BBD8A33EFBA3F18
232B88D88FE54E17260FA3E2CC29DEC0CB72B88DC816FF5> |-
/colon <1C60D8A8C9B08A9570810981675968F2C9119AD767573D3896DCDEF9
DA5F5F8912E04C94872E9ED59B26AA7979866D70736E39162F6D45AC4E5BC3A4
24B2E5A438DB713C33C0D2FE26717D> |-
/A <1C60D8A8C9B08A9501CDAE1251A61DF6E2312CA41635F6CE1D00B63E171C
70F84D42F62A21A6DD37D84C279E3FAE908D39B730ACD671ED9E277ACFE833A1
1F48F076C9803DC08258033731BCBCE19DF3B81C1C298B382A15FAC94387A992
AD9631716A7ED4F711137D6C851AE1C8DCBBFBCF7274E882226E58958CE6283A
197E7FAE3A2D0F6C24FA411BECFB36A10FF2A923EA89ABEFAD5AB23D600F> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FOACYZ+CMR10 /Encoding get
dup 48 /zero put
dup 58 /colon put
dup 65 /A put
pop
%ADOEndSubsetFont
/FOACYZ+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /.notdef /period /.notdef 
/zero /one /two /three 6{/.notdef}rp /colon 2{/.notdef}rp /equal 
3{/.notdef}rp /A 17{/.notdef}rp /S /T 2{/.notdef}rp /W 9{/.notdef}rp 
/a /b /c /d /e /f /g /h 
/i /j /.notdef /l /m /n /o /p 
/.notdef /r /s /t /u /v /w /.notdef 
/y 134{/.notdef}rp]
FOACYZ+CMR10 nf
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
156.761 -222.398 mo
(=\()
[12.3627 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
173.44 -222.398 mo
(h)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
179.801 -226.478 mo
(A)sh
179.801 -219.635 mo
(i)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
190.721 -222.398 mo
(:)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
197.68 -222.398 mo
(i)sh
%ADOBeginSubsetFont: QJJAAA+CMSY10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FOACZB+CMSY10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/element <1C60D8A8C9B08A944AAF3A41AE50D0CBD86C3E8E3BE9895745426E
49E726F60BE6E5C77217B53B7A2DA2A8601B91F6860842ED5C691ED871F75028
26730F12534604806623A66157E8079444EE556D25BCEE590FD2AEC0EBF2D178
5B553D38CFBDECD9E5538FAA81CD26FE39BBCF90A3BF0009DEEF> |-
/negationslash <1C60D8A8C9C4A6C26B10FB8D5BDE6CDBBEB886041A00DE26
9FE4574E0C52302BBEA369E837137960896E05260FCFCD6FD0F901207BB5F1B6
4563444C55BDB2D893EC2708960A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FOACZB+CMSY10 /Encoding get
dup 50 /element put
dup 54 /negationslash put
pop
%ADOEndSubsetFont
/FOACZB+CMSY10*1 
[49{/.notdef}rp /infinity /element 3{/.notdef}rp /negationslash 4{/.notdef}rp /emptyset 42{/.notdef}rp 
/braceleft /braceright 152{/.notdef}rp]
FOACZB+CMSY10 nf
FOACZB+CMSY10*1 [10.9589 0 0 -10.9589 0 0 ]msf
205.242 -222.398 mo
(2)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
216.398 -222.398 mo
(I)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
222.041 -222.398 mo
(\))sh
FOACZI+CMSL10*1 [10.9589 0 0 -10.9589 0 0 ]msf
230.436 -222.398 mo
(is)
[3.00275 0 ]xsh
-119.361 -208.239 mo
(theminimalnon-negativesolutio)
[4.30365 6.13368 8.51178 9.11444 2.99945 6.12273 2.99945 9.11444 5.52 6.72548 6.1337 5.51999 
6.1337 3.59116 6.1337 4.90631 5.51999 5.52 4.30363 2.99945 5.39944 8.39124 4.3145 5.51997 
2.99945 6.13373 4.30365 2.99945 0 ]xsh
38.527 -208.239 mo
(ntothesy)
[9.60437 4.32227 9.12219 4.3223 6.11945 8.3989 4.31119 0 ]xsh
90.5128 -208.239 mo
(stemoflinearequations)
[4.28708 4.3201 4.91177 12.7144 5.51453 6.96106 3.0159 3.0159 6.1282 4.91177 5.51453 7.92548 
4.91177 5.75562 6.1282 5.51453 4.32007 3.0159 5.51453 6.1282 0 ]xsh
%ADOBeginSubsetFont: LLIAAA+CMEX10 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /LLIAAA+CMEX10 def
/FontInfo 8 dict dup begin
/Notice (Copyright (C) 1997 American Mathematical Society. All Rights Reserved) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (CMEX10) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 26 /braceleftbigg put
dup 80 /summationtext put
def
/FontBBox {-24 -2960 1454 772} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-20 -0] def
/OtherBlues [-1159 -1139] def
/BlueScale 0.04796 def
/StdHW [47] def
/StdVW [47] def
/StemSnapH [40 47] def
/StemSnapV [40 47] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/braceleftbigg <1C60D8A8C9B6E3FA5724592E194D08332F873DF0D14183C0
6150875D8D7D5D9B55635E3DA9BF8F5908E94A1C5622F8BC4759EDCB81D37239
D9A18A28AF41FE4AF7FFF7E2663F23DDC0487BFE1A1EE1D1BD246FE41D50E308
1BF8DDC80B4880A7A8EB485A78F0E2644E056F4A8A48B81270320F47A839E71E
D77605F50B0978AA7B0995E0AA692AC6E3FB7D465AD18A386A46F22CB942E781
3E0CB433A439DE6EDF7DB0DC69AF8A11C85A468492C7AAA98B164980B361D4A1
492CF95E63E27D6F7B92CA> |-
/summationtext <1C60D8A8C9B08A94D23A6AA35126F81064EA3BBD3C652E69
0CA3B67504E0960005DA1F91D91A5FD954AD3579BAC8B8CF7CC53F0F44836A82
02B829B33B2BC9796DB34CBF72417984AE189707E420DD8DB84C80F9D686A50B
1A923FFBAEDECB3B744D8037D2BE7E532A4185732D6941B09736F4AC18616FE6
0CD0D1> |-
/.notdef <1C60D8A8C9B08A959E2F69652E8B8F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/FOACZJ+CMEX10 /LLIAAA+CMEX10 findfont ct_VMDictPut
/FOACZJ+CMEX10*1 
[26{/.notdef}rp /braceleftbigg 53{/.notdef}rp /summationtext 175{/.notdef}rp]
FOACZJ+CMEX10 nf
FOACZJ+CMEX10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-13.6516 -189.642 mo
(\032)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-1.77213 -182.803 mo
(h)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
4.60095 -186.758 mo
(A)sh
4.60095 -180.038 mo
(i)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
14.8009 -182.798 mo
(=1)
[11.5222 0 ]xsh
FOACZI+CMSL10*1 [10.9589 0 0 -10.9589 0 0 ]msf
83.7982 -182.798 mo
(for)
[3.37973 5.50574 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
100.598 -182.798 mo
(i)sh
FOACZB+CMSY10*1 [10.9589 0 0 -10.9589 0 0 ]msf
107.316 -182.798 mo
(2)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
117.76 -182.798 mo
(A;)
[8.16 0 ]xsh
FOACZJ+CMEX10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-1.758 -174.633 mo
(P)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
9.88095 -163.118 mo
(j)sh
%ADOBeginSubsetFont: UGXAAA+CMSY7 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FOACZE+CMSY7 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/element <1C60D8A8C9B08A9462A6E20482317444DD5FB9AB326AE3445CE19A
E7A2A664CC16E4538AD9352DE3614B55B73D053DFA1D755DD4F5BD473D77DE74
40175E8680D3DACDA0A584B674E33C763AA141CE6594B0AA38E0169E685CB603
2A97F7633F7374A48F56D3D1C14536E04DBA0E1C439F8AE06D21FA6E99> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FOACZE+CMSY7 /Encoding get
dup 50 /element put
pop
%ADOEndSubsetFont
/FOACZE+CMSY7*1 
[21{/.notdef}rp /greaterequal 28{/.notdef}rp /element 205{/.notdef}rp]
FOACZE+CMSY7 nf
FOACZE+CMSY7*1 [7.6712 0 0 -7.6712 0 0 ]msf
13.962 -163.118 mo
(2)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
19.8382 -163.118 mo
(I)sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
26.681 -166.358 mo
(q)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
31.6009 -164.678 mo
(ij)
[3.11841 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
39.281 -166.358 mo
(h)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
45.6409 -170.318 mo
(A)sh
45.6409 -163.475 mo
(j)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
55.721 -166.358 mo
(=0)
[11.6427 0 ]xsh
FOACZI+CMSL10*1 [10.9589 0 0 -10.9589 0 0 ]msf
83.7977 -166.358 mo
(for)
[3.37973 5.50574 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
100.598 -166.358 mo
(i)sh
FOACZB+CMSY10*1 [10.9589 0 0 -10.9589 0 0 ]msf
107.315 -166.358 mo
(62)
[0 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
117.759 -166.358 mo
(A:)
[8.16 0 ]xsh
%ADOBeginSubsetFont: HIBBAA+CMTI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FOACZA+CMTI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/P <1C60D8A8C9B08A944673E500298349C28EAE74789836B5AC4126E2A25497
DED6EB3E5CF5D8F8E11E4E8BFD026A59B2AEB340D7720BB85FE7B2CE438A5127
768BD470379820C9B80392F17709D4781DB217A2255DC1DA217EA9035144ABF8
730406B44492E8AD6C9804BFA3611B5C3860BF3C8003C5E75B95FB231EAAE807
47CD7C0EDBD6BF9020F2506F1FE37F8A507B00034C87EAE926787C00FDC3E2CE
F17C6F1E9AED7C15D1617D8D91DC83> |-
/f <1C60D8A8C9B08A956B318F2665F118A3D3E364C2F83711DCE614FB44F5FB
6424BAE8E9BA8222531E6118B31C24570B8982E7FE66C1A1F98F94BBD40659E7
BF8201C288C356FBC8A5C07662ED133750F3D845CAEEF8390C6A60CB26B43CB6
A9F8393E84AF82AAF11DC365C687BD919144A70D4AC338A1D5276D190D0DD2C2
A875DB6B14B11F004AFF9DE20B6A90060AA73A80DD565DA7A4AA835941F5B5EC
6914E7C93ED89ADCC46D4324092C4976D8A4E163D60F4FCE28B0D55B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FOACZA+CMTI10 /Encoding get
dup 80 /P put
dup 102 /f put
pop
%ADOEndSubsetFont
/FOACZA+CMTI10*1 
[45{/.notdef}rp /hyphen /period 4{/.notdef}rp /three 15{/.notdef}rp /C 5{/.notdef}rp 
/I 3{/.notdef}rp /M 2{/.notdef}rp /P 16{/.notdef}rp /a /b 
/c /.notdef /e /f /.notdef /h /i /.notdef 
/k /l /m /n /o /p /.notdef /r 
/s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]
FOACZA+CMTI10 nf
FOACZA+CMTI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-119.358 -129.876 mo
(Proof.)
[7.43335 4.07997 5.03345 5.63617 3.36775 0 ]xsh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-84.7941 -129.876 mo
(A)sh
-76.6297 -129.876 mo
(pplyTheorem1.3.2tothejumpchainandrewrite)
[6.12492 6.12492 3.00165 9.71945 7.9222 6.12491 4.89755 5.51123 4.32764 4.89755 12.9522 5.51123 
3.00165 5.51123 3.00165 9.35779 4.3168 9.47836 4.31677 6.12494 8.75507 3.38519 6.12494 9.16046 
9.96057 4.5578 6.12491 5.51123 3.00162 10.0811 5.52216 6.12494 9.96054 4.32764 4.89752 7.94412 
4.32764 3.00162 4.3168 0 ]xsh
.870146 .314549 .49305 .0830091 cmyk
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
171.436 -129.876 mo
(\(1.3\))
[4.3168 5.51123 3.00162 5.51126 0 ]xsh
1 /0 /CSD get_res sepcs
1 sep
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
197.94 -129.876 mo
(interms)
[3.00165 10.0811 4.29486 4.89755 4.32764 9.16046 0 ]xsh
-119.347 -115.717 mo
(of)
[5.52 0 ]xsh
%ADOBeginSubsetFont: GFNBAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FOACZC+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Q <1C60D8A8C9B08A947AB7D3ED59501221308E57E33CAC3A52A22F39008EAB
9E27249EF22C483EDADFC54FA3D0F25A360625FFD3C8D34193D50A1EEF254A38
B6869128D0F8C6A2D68541A1B2FA2AAEE86588D5693079E9289932DE41D9DB82
F396CFABF648D2D871BE84B85E79015F543EDB72A0AEEBD29AB9B3021F4D1326
FD5BEE982FD6225E0AC41051F7F2FAEA6DACEF4EDEA8FC3AE4B0A16D268017F3
1355E0A7F18C07F2A7FEF32EE696BCD22AFACA96ADF8A306CA404C4C97912D2F
60A5F01EC942D13D82B5B629913749432485FBB2A8A3DF6E3959B78E1AC0534C
C960C79442A886> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FOACZC+CMMI10 /Encoding get
dup 81 /Q put
pop
%ADOEndSubsetFont
/FOACZC+CMMI10*1 
[58{/.notdef}rp /period /comma /less 4{/.notdef}rp /A 2{/.notdef}rp /D 
3{/.notdef}rp /H /I /J 6{/.notdef}rp /Q 6{/.notdef}rp /X 
15{/.notdef}rp /h /i 7{/.notdef}rp /q 142{/.notdef}rp]
FOACZC+CMMI10 nf
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-106.865 -115.717 mo
(Q)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-98.2297 -115.717 mo
(.)sh
-84.2111 -122.186 mo
-76.7711 -122.186 li
-76.7711 -121.826 li
-84.2111 -121.826 li
cp
1 /0 /CSD get_res sepcs
1 sep
gsave
clp
[1 0 0 -1 243.919 123.389 ]ct
[7.44 0 0 -.36 -328.13 245.575 ]ct
<<
/T 1
/W 1 
/H 1 
/M[1 0 0 -1 0 1 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~!!~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
-84.2111 -121.946 mo
-83.8511 -121.946 li
-83.8511 -114.986 li
-84.2111 -114.986 li
cp
gsave
clp
[1 0 0 -1 243.919 123.389 ]ct
[.36 0 0 -6.96001 -328.13 245.335 ]ct
<<
/T 1
/W 1 
/H 1 
/M[1 0 0 -1 0 1 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~!!~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
-77.1311 -121.946 mo
-76.7711 -121.946 li
-76.7711 -114.986 li
-77.1311 -114.986 li
cp
gsave
clp
[1 0 0 -1 243.919 123.389 ]ct
[.36 0 0 -6.96001 -321.05 245.335 ]ct
<<
/T 1
/W 1 
/H 1 
/M[1 0 0 -1 0 1 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~!!~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
-84.2111 -114.986 mo
-76.7711 -114.986 li
-76.7711 -114.626 li
-84.2111 -114.626 li
cp
gsave
clp
[1 0 0 -1 243.919 123.389 ]ct
[7.44 0 0 -.36 -328.13 238.375 ]ct
<<
/T 1
/W 1 
/H 1 
/M[1 0 0 -1 0 1 ]
/MD false
/BC 1 
/D[0 1 ]
/DS 
<~!!~>
/O 1
>>
%%BeginBinary: 1
sepimg
%%EndBinary
grestore
np
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FOACYZ+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/hyphen <1C60D8A8C9B08A959E2F69652E8B76AC2AC5B4F1FA8662A86AEED57
846929C2FBC07360B> |-
/I <1C60D8A8C9B08A9591900960B3FA4612DFF926AB21A530E1912F33677612
AC06B324D812E42049FF4946BE5E0FFA24FA0C62F2839FF2110EEC7EE0A42476
46E6F699D4C8BECE1825B3A661611E4D55F40F2E64FACB836D4D0C9780F60650
FBF10E0D42> |-
/k <1C60D8A8C9B08A95D222871B45C8170346D4B18ED19B2E2E03D20F864B5D
C5BD82CE186E8865448F19B50359E04C51718F8BDF55D412398F4EF83C05419A
DE886E1536E26F7FC0E53312F110D79646DAD9F1D10B32AFE3698557277E72D5
7B4C7DAD8FF58DCEB52B83B453E4BE2D48D6882B0AECFDF4A8BCF747376E22D9
81F8E1C7CD6E92891501D7EE1AA17A160448D2B40E0899A7693FEF353371FE21
8D3D2DA9622BE1E9110437FDF2C62C6B642301FAF5AD> |-
/q <1C60D8A8C9B08A95D222871B45C8677AD60861C3F92152D679EC046FD508
04EE7440261F7F760EFE5BDA37735333B634AEF0E39D128EC81BD50CEED93A00
645B5D6515E247CEC7B0C61191F67893C528A900762C59FAEA845D61ACA5F7E7
B106031460E4734AA4EE85618EEC80B1ED1E754561578DABED479BE37358B263
04EF9BF65844BFE482C31643A7466E43F6E32A0E02E6EBB6652EB71BB9780CA6
2F7BC7305363> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FOACYZ+CMR10 /Encoding get
dup 45 /hyphen put
dup 73 /I put
dup 107 /k put
dup 113 /q put
pop
%ADOEndSubsetFont
/FOACYZ+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef 
/zero /one /two /three 6{/.notdef}rp /colon 2{/.notdef}rp /equal 
3{/.notdef}rp /A 7{/.notdef}rp /I 9{/.notdef}rp /S /T 2{/.notdef}rp 
/W 9{/.notdef}rp /a /b /c /d /e /f 
/g /h /i /j /k /l /m /n 
/o /p /q /r /s /t /u /v 
/w /.notdef /y 134{/.notdef}rp]
FOACYZ+CMR10 nf
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-106.159 -91.8377 mo
(Theaveragetimetaken,startingfrom)
[7.94521 6.12602 8.51506 5.16165 5.40274 4.90958 4.32875 5.51233 5.51233 8.39452 4.29597 3.00273 
9.16156 8.51508 4.29596 5.51233 5.40274 4.90961 6.12601 6.59726 4.35068 4.29596 5.51233 4.32874 
4.29599 3.00275 6.12601 8.99725 3.38632 4.32877 5.51233 0 ]xsh
%ADOBeginSubsetFont: GFNBAA+CMMI10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FOACZC+CMMI10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/k <1C60D8A8C9B08A950870E36747CCD2F069BAB4078E293FC46118DBB0FF50
21FD267E305A93E3B9EEC42C57CCDC98E9085508A0279B5E924DC8D8249FB392
C042269C59395DE18C56A360550D8C0ED9C3AFC2FDA4AE58AD909C542F1D56B1
61C5179601DBF5C94444DD0B9F055BE088FB6B642BE14831A86C5BEEF0E256B3
9D4AC46C4ED9DF4A354293CDCB8A1813369714C569D8175330F277A54A760D07
A53A3C00B10B1764A5E232EA1C68F5C304B41316F75BD759DC633B0BA29C870B
363D372EA12A78A4D533B5A688CD4860D786992FBDB0833174D4125943DE5B62
FF7B77A96423BE665CBFC96F04F996C6434785D817FA8F95D8BFEC21E11687C7
716A7F64FE23864587A3> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FOACZC+CMMI10 /Encoding get
dup 107 /k put
pop
%ADOEndSubsetFont
/FOACZC+CMMI10*1 
[58{/.notdef}rp /period /comma /less 4{/.notdef}rp /A 2{/.notdef}rp /D 
3{/.notdef}rp /H /I /J 6{/.notdef}rp /Q 6{/.notdef}rp /X 
15{/.notdef}rp /h /i /.notdef /k 5{/.notdef}rp /q 142{/.notdef}rp]
FOACZC+CMMI10 nf
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
80.197 -91.8377 mo
(i)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
83.923 -91.8377 mo
(,for\()
[6.84274 3.36874 5.51672 7.8071 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
111.759 -91.8377 mo
(X)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
120.881 -90.1577 mo
(t)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
124.721 -91.8377 mo
(\))sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
129.041 -90.1577 mo
(t)sh
FOACZE+CMSY7*1 [7.6712 0 0 -7.6712 0 0 ]msf
132.401 -90.1577 mo
(\025)sh
FOACZF+CMR7*1 [7.6712 0 0 -7.6712 0 0 ]msf
139.244 -90.1577 mo
(0)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
147.641 -91.8377 mo
(toreach)
[4.30911 9.12 4.34192 4.91177 5.52548 4.55014 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
189.997 -91.8377 mo
(A)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
201.877 -91.8377 mo
(isgiven)
[3.00275 8.03284 5.52328 3.00275 5.40274 4.90958 0 ]xsh
-119.362 -77.6788 mo
(by)
[5.76438 0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
25.8437 -62.6761 mo
(k)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
31.961 -67.1177 mo
(A)sh
31.6004 -59.9145 mo
(i)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
42.0409 -62.6777 mo
(=)sh
%ADOBeginSubsetFont: ELRBAA+MSBM10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FOACZG+MSBM10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/E <1C60D8A8C9B08A944AAF3A41AE503849AF650328F1EF6B1D2B74FBDAF00A
109783A99C4C754C29954E5B1B89DF0E0E4BB7D4A95B14DDAF5FBBB151BE2DA3
41DB09D661055C3F4A2F740267F65E9E43D869E27AD7560DA82123AA2681DC4E
48691611DE882AB65F28341F4F762B47CE10501FC36FA154E14C6B981FAD1298
CBAF4A9F7E60FDB156FB2E049EBFC5E4F5E0425C5929CA4256E84901F8804E13
002CF36606882C351B2B121B03073DBCBC73672D4E01215C86CA6287D29AF917
7E8DAE35404A6779C8E6F7F17057A1894B3B4E89FB40B95C63166A1979BD5A98
FC93933E17BE46F4740AA1B10A63220914AF7D1CC1C26E5C189E572C68C63909
50B1CC0907E9ED4C1F4CE3E1E67E48DFB5C58ECB4D748FC1BDD4071040898542
9D8ADD8DF5332FE80DC4078C110B9C70DE2E6208EF098E19A181B103AE00> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FOACZG+MSBM10 /Encoding get
dup 69 /E put
pop
%ADOEndSubsetFont
/FOACZG+MSBM10*1 
[69{/.notdef}rp /E 10{/.notdef}rp /P 175{/.notdef}rp]
FOACZG+MSBM10 nf
FOACZG+MSBM10*1 [10.9589 0 0 -10.9589 0 0 ]msf
53.6793 -62.6777 mo
(E)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
61.001 -60.9977 mo
(i)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
64.6009 -62.6777 mo
(\()sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
68.9187 -62.6777 mo
(D)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
78.401 -67.1177 mo
(A)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
85.3609 -62.6777 mo
(\))sh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
89.6788 -62.6777 mo
(:)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-119.362 -39.9928 mo
(Incalculating)
[3.92758 9.72493 4.91397 5.51671 3.01808 4.91397 6.11945 3.00713 5.51671 4.32228 3.01808 6.11945 
0 ]xsh
FOACZC+CMMI10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-50.365 -39.9928 mo
(k)sh
FOACZD+CMMI7*1 [7.6712 0 0 -7.6712 0 0 ]msf
-44.2391 -43.9577 mo
(A)sh
-44.5996 -37.115 mo
(i)sh
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
-33.5591 -39.9977 mo
(wehaveto)
[7.54301 8.39781 6.1293 5.15398 5.41698 8.51836 4.32118 0 ]xsh
20.9176 -39.9977 mo
(takeaccountoftheholdingtimessotherela-)
[4.30145 5.51779 5.39728 8.50958 5.51779 4.90411 4.90411 5.51782 6.1315 5.75888 7.55624 5.51782 
6.96439 4.32336 6.1315 8.27945 6.1315 5.51782 2.99725 6.12051 2.99725 6.12054 9.00272 4.32339 
2.99725 9.11224 4.90408 7.91779 4.35614 9.00275 4.30145 6.1315 8.39999 4.3233 4.90408 2.99728 
5.51779 0 ]xsh
-119.367 -25.7183 mo
(tionshiptothediscrete-timecaseisnotquiteassimple.)
[4.31021 3.00603 5.52658 6.14027 4.3101 6.1293 3.00603 9.72383 4.31021 9.12109 4.31023 6.14026 
8.39783 6.1293 3.00603 4.3101 4.91287 4.34299 4.91289 4.31023 4.91287 3.59773 4.31023 3.00601 
9.12102 8.27724 4.9129 5.52655 4.31012 8.51837 3.00601 8.03613 6.14026 5.52658 7.80609 5.75671 
6.14026 3.00598 4.31024 8.51834 5.52658 7.91559 4.31009 3.00601 9.12103 6.1293 3.00601 4.91287 
0 ]xsh
.2 setflat
16.513 15.1273 mo
16.513 13.9173 15.5309 12.9353 14.3209 12.9353 cv
13.1109 12.9353 12.129 13.9173 12.129 15.1273 cv
12.129 16.3373 13.1109 17.3193 14.3209 17.3193 cv
15.5309 17.3193 16.513 16.3373 16.513 15.1273 cv
f
1 setflat
.2 setflat
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
4.94666 11.1565 mo
(1)sh
110.068 15.1273 mo
110.068 13.9173 109.086 12.9353 107.876 12.9353 cv
106.666 12.9353 105.684 13.9173 105.684 15.1273 cv
105.684 16.3373 106.666 17.3193 107.876 17.3193 cv
109.086 17.3193 110.068 16.3373 110.068 15.1273 cv
f
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
111.775 11.1565 mo
(2)sh
110.068 108.682 mo
110.068 107.472 109.086 106.49 107.876 106.49 cv
106.666 106.49 105.684 107.472 105.684 108.682 cv
105.684 109.892 106.666 110.874 107.876 110.874 cv
109.086 110.874 110.068 109.892 110.068 108.682 cv
f
%ADOBeginSubsetFont: PBAAAA+CMR10 AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2020 Adobe System Incorporated. All rights reserved.
systemdict begin
FOACYZ+CMR10 dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/four <1C60D8A8C9B7A73DC579B9C1587087D4749982A674065F9D4190A646C
4B6AEC0EE9FA16CBD7A614FBA5C7797971DF7C6EA57394603F00B98324AF84E1
D747CBDA8BF6ACE99B270F3634D0598A7799230B2FA53F37697C8FB04996EB79
CA1E39DB1488D8A5A85F57D049C7AE31C6F8A6F15F2EE8FAE7CD4D80767B9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
FOACYZ+CMR10 /Encoding get
dup 52 /four put
pop
%ADOEndSubsetFont
/FOACYZ+CMR10*1 
[40{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen /period /.notdef 
/zero /one /two /three /four 5{/.notdef}rp /colon 2{/.notdef}rp 
/equal 3{/.notdef}rp /A 7{/.notdef}rp /I 9{/.notdef}rp /S /T 
2{/.notdef}rp /W 9{/.notdef}rp /a /b /c /d /e 
/f /g /h /i /j /k /l /m 
/n /o /p /q /r /s /t /u 
/v /w /.notdef /y 134{/.notdef}rp]
FOACYZ+CMR10 nf
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
111.775 119.568 mo
(4)sh
16.513 108.682 mo
16.513 107.472 15.5309 106.49 14.3209 106.49 cv
13.1109 106.49 12.129 107.472 12.129 108.682 cv
12.129 109.892 13.1109 110.874 14.3209 110.874 cv
15.5309 110.874 16.513 109.892 16.513 108.682 cv
f
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
4.94666 119.568 mo
(3)sh
1.096 lw
0 lc
0 lj
10 ml
[] 0 dsh
false sadj
105.672 15.1393 mo
16.513 15.1393 li
107.864 17.3303 mo
107.864 106.49 li
106.314 16.6893 mo
15.8709 107.132 li
14.3209 106.49 mo
14.3209 17.3303 li
16.513 108.682 mo
105.672 108.682 li
@
FOACYZ+CMR10*1 [10.9589 0 0 -10.9589 0 0 ]msf
3.34175 84.0823 mo
(3)sh
3.34175 46.6467 mo
(1)sh
39.6376 121.178 mo
(3)sh
39.6376 9.56178 mo
(12)
[37.44 0 ]xsh
113.38 46.6577 mo
(2)sh
26.7938 83.6768 mo
(3)sh
77.2376 33.4193 mo
(2)sh
11.5809 35.5313 mo
14.3209 43.2023 li
17.0609 35.5313 li
14.3209 38.5993 li
f
14.321 17.3303 mo
14.321 38.5993 li
@
34.7129 17.8783 mo
42.3839 15.1393 li
34.7129 12.3993 li
37.7819 15.1393 li
f
16.513 15.1393 mo
37.7819 15.1393 li
@
87.472 12.3993 mo
79.8009 15.1393 li
87.472 17.8783 li
84.4039 15.1393 li
f
105.672 15.1393 mo
84.4039 15.1393 li
@
91.5199 27.6093 mo
88.0329 34.9703 li
95.3939 31.4833 li
91.2869 31.7163 li
f
106.314 16.6893 mo
91.2869 31.7163 li
@
105.125 35.5313 mo
107.864 43.2023 li
110.604 35.5313 li
107.864 38.5993 li
f
107.864 17.3303 mo
107.864 38.5993 li
@
17.061 88.2903 mo
14.3209 80.6193 li
11.5809 88.2903 li
14.3209 85.2213 li
f
14.321 106.49 mo
14.321 85.2213 li
@
30.666 96.2123 mo
34.153 88.8503 li
26.791 92.3373 li
30.898 92.1053 li
f
15.8709 107.132 mo
30.8979 92.1053 li
@
34.7129 111.422 mo
42.3839 108.682 li
34.7129 105.942 li
37.7819 108.682 li
f
16.513 108.682 mo
37.7819 108.682 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/FOACZJ+CMEX10*1 uf
/FOACZJ+CMEX10 uf
/LLIAAA+CMEX10 uf
/FOACZI+CMSL10*1 uf
/FOACZI+CMSL10 uf
/YEKBAA+CMSL10 uf
/FOACZH+CMBX10*1 uf
/FOACZH+CMBX10 uf
/AXNBAA+CMBX10 uf
/FOACZG+MSBM10*1 uf
/FOACZG+MSBM10 uf
/ELRBAA+MSBM10 uf
/FOACZF+CMR7*1 uf
/FOACZF+CMR7 uf
/MZQAAA+CMR7 uf
/FOACZD+CMMI7*1 uf
/FOACZD+CMMI7 uf
/OOLBAA+CMMI7 uf
/FOACZE+CMSY7*1 uf
/FOACZE+CMSY7 uf
/UGXAAA+CMSY7 uf
/FOACZB+CMSY10*1 uf
/FOACZB+CMSY10 uf
/QJJAAA+CMSY10 uf
/FOACZC+CMMI10*1 uf
/FOACZC+CMMI10 uf
/GFNBAA+CMMI10 uf
/FOACYZ+CMR10*1 uf
/FOACYZ+CMR10 uf
/PBAAAA+CMR10 uf
/FOACZA+CMTI10*1 uf
/FOACZA+CMTI10 uf
/HIBBAA+CMTI10 uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
